// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Character gRPC server encoders and decoders
//
// Command:
// $ goa gen character/design

package server

import (
	character "character/gen/character"
	characterpb "character/gen/grpc/character/pb"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeCreateCharacterResponse encodes responses from the "Character" service
// "createCharacter" endpoint.
func EncodeCreateCharacterResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*character.Character)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Character", "createCharacter", "*character.Character", v)
	}
	resp := NewProtoCreateCharacterResponse(result)
	return resp, nil
}

// DecodeCreateCharacterRequest decodes requests sent to "Character" service
// "createCharacter" endpoint.
func DecodeCreateCharacterRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *characterpb.CreateCharacterRequest
		ok      bool
	)
	{
		if message, ok = v.(*characterpb.CreateCharacterRequest); !ok {
			return nil, goagrpc.ErrInvalidType("Character", "createCharacter", "*characterpb.CreateCharacterRequest", v)
		}
		if err := ValidateCreateCharacterRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *character.Character
	{
		payload = NewCreateCharacterPayload(message)
	}
	return payload, nil
}

// EncodeGetCharacterResponse encodes responses from the "Character" service
// "getCharacter" endpoint.
func EncodeGetCharacterResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*character.Character)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Character", "getCharacter", "*character.Character", v)
	}
	resp := NewProtoGetCharacterResponse(result)
	return resp, nil
}

// DecodeGetCharacterRequest decodes requests sent to "Character" service
// "getCharacter" endpoint.
func DecodeGetCharacterRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *characterpb.GetCharacterRequest
		ok      bool
	)
	{
		if message, ok = v.(*characterpb.GetCharacterRequest); !ok {
			return nil, goagrpc.ErrInvalidType("Character", "getCharacter", "*characterpb.GetCharacterRequest", v)
		}
	}
	var payload *character.GetCharacterPayload
	{
		payload = NewGetCharacterPayload(message)
	}
	return payload, nil
}

// EncodeListCharactersResponse encodes responses from the "Character" service
// "listCharacters" endpoint.
func EncodeListCharactersResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.([]*character.Character)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Character", "listCharacters", "[]*character.Character", v)
	}
	resp := NewProtoListCharactersResponse(result)
	return resp, nil
}

// EncodeUpdateCharacterResponse encodes responses from the "Character" service
// "updateCharacter" endpoint.
func EncodeUpdateCharacterResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*character.Character)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Character", "updateCharacter", "*character.Character", v)
	}
	resp := NewProtoUpdateCharacterResponse(result)
	return resp, nil
}

// DecodeUpdateCharacterRequest decodes requests sent to "Character" service
// "updateCharacter" endpoint.
func DecodeUpdateCharacterRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *characterpb.UpdateCharacterRequest
		ok      bool
	)
	{
		if message, ok = v.(*characterpb.UpdateCharacterRequest); !ok {
			return nil, goagrpc.ErrInvalidType("Character", "updateCharacter", "*characterpb.UpdateCharacterRequest", v)
		}
		if err := ValidateUpdateCharacterRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *character.Character
	{
		payload = NewUpdateCharacterPayload(message)
	}
	return payload, nil
}

// EncodeDeleteCharacterResponse encodes responses from the "Character" service
// "deleteCharacter" endpoint.
func EncodeDeleteCharacterResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewProtoDeleteCharacterResponse()
	return resp, nil
}

// DecodeDeleteCharacterRequest decodes requests sent to "Character" service
// "deleteCharacter" endpoint.
func DecodeDeleteCharacterRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *characterpb.DeleteCharacterRequest
		ok      bool
	)
	{
		if message, ok = v.(*characterpb.DeleteCharacterRequest); !ok {
			return nil, goagrpc.ErrInvalidType("Character", "deleteCharacter", "*characterpb.DeleteCharacterRequest", v)
		}
	}
	var payload *character.DeleteCharacterPayload
	{
		payload = NewDeleteCharacterPayload(message)
	}
	return payload, nil
}
