// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Character gRPC server
//
// Command:
// $ goa gen character/design

package server

import (
	character "character/gen/character"
	characterpb "character/gen/grpc/character/pb"
	"context"
	"errors"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the characterpb.CharacterServer interface.
type Server struct {
	CreateCharacterH goagrpc.UnaryHandler
	GetCharacterH    goagrpc.UnaryHandler
	ListCharactersH  goagrpc.UnaryHandler
	UpdateCharacterH goagrpc.UnaryHandler
	DeleteCharacterH goagrpc.UnaryHandler
	characterpb.UnimplementedCharacterServer
}

// New instantiates the server struct with the Character service endpoints.
func New(e *character.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		CreateCharacterH: NewCreateCharacterHandler(e.CreateCharacter, uh),
		GetCharacterH:    NewGetCharacterHandler(e.GetCharacter, uh),
		ListCharactersH:  NewListCharactersHandler(e.ListCharacters, uh),
		UpdateCharacterH: NewUpdateCharacterHandler(e.UpdateCharacter, uh),
		DeleteCharacterH: NewDeleteCharacterHandler(e.DeleteCharacter, uh),
	}
}

// NewCreateCharacterHandler creates a gRPC handler which serves the
// "Character" service "createCharacter" endpoint.
func NewCreateCharacterHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeCreateCharacterRequest, EncodeCreateCharacterResponse)
	}
	return h
}

// CreateCharacter implements the "CreateCharacter" method in
// characterpb.CharacterServer interface.
func (s *Server) CreateCharacter(ctx context.Context, message *characterpb.CreateCharacterRequest) (*characterpb.CreateCharacterResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "createCharacter")
	ctx = context.WithValue(ctx, goa.ServiceKey, "Character")
	resp, err := s.CreateCharacterH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "CharacterAlreadyExists":
				var er *character.CharacterAlreadyExists
				errors.As(err, &er)
				return nil, goagrpc.NewStatusError(codes.AlreadyExists, err, NewCreateCharacterCharacterAlreadyExistsError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*characterpb.CreateCharacterResponse), nil
}

// NewGetCharacterHandler creates a gRPC handler which serves the "Character"
// service "getCharacter" endpoint.
func NewGetCharacterHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetCharacterRequest, EncodeGetCharacterResponse)
	}
	return h
}

// GetCharacter implements the "GetCharacter" method in
// characterpb.CharacterServer interface.
func (s *Server) GetCharacter(ctx context.Context, message *characterpb.GetCharacterRequest) (*characterpb.GetCharacterResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "getCharacter")
	ctx = context.WithValue(ctx, goa.ServiceKey, "Character")
	resp, err := s.GetCharacterH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "CharacterNotFound":
				var er *character.CharacterNotFound
				errors.As(err, &er)
				return nil, goagrpc.NewStatusError(codes.NotFound, err, NewGetCharacterCharacterNotFoundError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*characterpb.GetCharacterResponse), nil
}

// NewListCharactersHandler creates a gRPC handler which serves the "Character"
// service "listCharacters" endpoint.
func NewListCharactersHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeListCharactersResponse)
	}
	return h
}

// ListCharacters implements the "ListCharacters" method in
// characterpb.CharacterServer interface.
func (s *Server) ListCharacters(ctx context.Context, message *characterpb.ListCharactersRequest) (*characterpb.ListCharactersResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "listCharacters")
	ctx = context.WithValue(ctx, goa.ServiceKey, "Character")
	resp, err := s.ListCharactersH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*characterpb.ListCharactersResponse), nil
}

// NewUpdateCharacterHandler creates a gRPC handler which serves the
// "Character" service "updateCharacter" endpoint.
func NewUpdateCharacterHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeUpdateCharacterRequest, EncodeUpdateCharacterResponse)
	}
	return h
}

// UpdateCharacter implements the "UpdateCharacter" method in
// characterpb.CharacterServer interface.
func (s *Server) UpdateCharacter(ctx context.Context, message *characterpb.UpdateCharacterRequest) (*characterpb.UpdateCharacterResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "updateCharacter")
	ctx = context.WithValue(ctx, goa.ServiceKey, "Character")
	resp, err := s.UpdateCharacterH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "CharacterNotFound":
				var er *character.CharacterNotFound
				errors.As(err, &er)
				return nil, goagrpc.NewStatusError(codes.NotFound, err, NewUpdateCharacterCharacterNotFoundError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*characterpb.UpdateCharacterResponse), nil
}

// NewDeleteCharacterHandler creates a gRPC handler which serves the
// "Character" service "deleteCharacter" endpoint.
func NewDeleteCharacterHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeDeleteCharacterRequest, EncodeDeleteCharacterResponse)
	}
	return h
}

// DeleteCharacter implements the "DeleteCharacter" method in
// characterpb.CharacterServer interface.
func (s *Server) DeleteCharacter(ctx context.Context, message *characterpb.DeleteCharacterRequest) (*characterpb.DeleteCharacterResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "deleteCharacter")
	ctx = context.WithValue(ctx, goa.ServiceKey, "Character")
	resp, err := s.DeleteCharacterH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*characterpb.DeleteCharacterResponse), nil
}
