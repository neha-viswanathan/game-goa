// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Character gRPC server types
//
// Command:
// $ goa gen character/design

package server

import (
	character "character/gen/character"
	characterpb "character/gen/grpc/character/pb"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// NewCreateCharacterPayload builds the payload of the "createCharacter"
// endpoint of the "Character" service from the gRPC request type.
func NewCreateCharacterPayload(message *characterpb.CreateCharacterRequest) *character.Character {
	v := &character.Character{
		Name: message.Name,
	}
	if message.Description != nil {
		v.Description = *message.Description
	}
	if message.Health != nil {
		v.Health = *message.Health
	}
	if message.Experience != nil {
		v.Experience = *message.Experience
	}
	if message.Description == nil {
		v.Description = ""
	}
	if message.Health == nil {
		v.Health = 100
	}
	if message.Experience == nil {
		v.Experience = 0
	}
	return v
}

// NewProtoCreateCharacterResponse builds the gRPC response type from the
// result of the "createCharacter" endpoint of the "Character" service.
func NewProtoCreateCharacterResponse(result *character.Character) *characterpb.CreateCharacterResponse {
	message := &characterpb.CreateCharacterResponse{
		Name:        result.Name,
		Description: &result.Description,
		Health:      &result.Health,
		Experience:  &result.Experience,
	}
	return message
}

// NewCreateCharacterCharacterAlreadyExistsError builds the gRPC error response
// type from the error of the "createCharacter" endpoint of the "Character"
// service.
func NewCreateCharacterCharacterAlreadyExistsError(er *character.CharacterAlreadyExists) *characterpb.CreateCharacterCharacterAlreadyExistsError {
	message := &characterpb.CreateCharacterCharacterAlreadyExistsError{
		Message_: er.Message,
		Name:     er.Name,
	}
	return message
}

// NewGetCharacterPayload builds the payload of the "getCharacter" endpoint of
// the "Character" service from the gRPC request type.
func NewGetCharacterPayload(message *characterpb.GetCharacterRequest) *character.GetCharacterPayload {
	v := &character.GetCharacterPayload{
		Name: message.Name,
	}
	return v
}

// NewProtoGetCharacterResponse builds the gRPC response type from the result
// of the "getCharacter" endpoint of the "Character" service.
func NewProtoGetCharacterResponse(result *character.Character) *characterpb.GetCharacterResponse {
	message := &characterpb.GetCharacterResponse{
		Name:        result.Name,
		Description: &result.Description,
		Health:      &result.Health,
		Experience:  &result.Experience,
	}
	return message
}

// NewGetCharacterCharacterNotFoundError builds the gRPC error response type
// from the error of the "getCharacter" endpoint of the "Character" service.
func NewGetCharacterCharacterNotFoundError(er *character.CharacterNotFound) *characterpb.GetCharacterCharacterNotFoundError {
	message := &characterpb.GetCharacterCharacterNotFoundError{
		Message_: er.Message,
		Name:     er.Name,
	}
	return message
}

// NewProtoListCharactersResponse builds the gRPC response type from the result
// of the "listCharacters" endpoint of the "Character" service.
func NewProtoListCharactersResponse(result []*character.Character) *characterpb.ListCharactersResponse {
	message := &characterpb.ListCharactersResponse{}
	message.Field = make([]*characterpb.Character2, len(result))
	for i, val := range result {
		message.Field[i] = &characterpb.Character2{
			Name:        val.Name,
			Description: &val.Description,
			Health:      &val.Health,
			Experience:  &val.Experience,
		}
	}
	return message
}

// NewUpdateCharacterPayload builds the payload of the "updateCharacter"
// endpoint of the "Character" service from the gRPC request type.
func NewUpdateCharacterPayload(message *characterpb.UpdateCharacterRequest) *character.Character {
	v := &character.Character{
		Name: message.Name,
	}
	if message.Description != nil {
		v.Description = *message.Description
	}
	if message.Health != nil {
		v.Health = *message.Health
	}
	if message.Experience != nil {
		v.Experience = *message.Experience
	}
	if message.Description == nil {
		v.Description = ""
	}
	if message.Health == nil {
		v.Health = 100
	}
	if message.Experience == nil {
		v.Experience = 0
	}
	return v
}

// NewProtoUpdateCharacterResponse builds the gRPC response type from the
// result of the "updateCharacter" endpoint of the "Character" service.
func NewProtoUpdateCharacterResponse(result *character.Character) *characterpb.UpdateCharacterResponse {
	message := &characterpb.UpdateCharacterResponse{
		Name:        result.Name,
		Description: &result.Description,
		Health:      &result.Health,
		Experience:  &result.Experience,
	}
	return message
}

// NewUpdateCharacterCharacterNotFoundError builds the gRPC error response type
// from the error of the "updateCharacter" endpoint of the "Character" service.
func NewUpdateCharacterCharacterNotFoundError(er *character.CharacterNotFound) *characterpb.UpdateCharacterCharacterNotFoundError {
	message := &characterpb.UpdateCharacterCharacterNotFoundError{
		Message_: er.Message,
		Name:     er.Name,
	}
	return message
}

// NewDeleteCharacterPayload builds the payload of the "deleteCharacter"
// endpoint of the "Character" service from the gRPC request type.
func NewDeleteCharacterPayload(message *characterpb.DeleteCharacterRequest) *character.DeleteCharacterPayload {
	v := &character.DeleteCharacterPayload{
		Name: message.Name,
	}
	return v
}

// NewProtoDeleteCharacterResponse builds the gRPC response type from the
// result of the "deleteCharacter" endpoint of the "Character" service.
func NewProtoDeleteCharacterResponse() *characterpb.DeleteCharacterResponse {
	message := &characterpb.DeleteCharacterResponse{}
	return message
}

// ValidateCreateCharacterRequest runs the validations defined on
// CreateCharacterRequest.
func ValidateCreateCharacterRequest(message *characterpb.CreateCharacterRequest) (err error) {
	if utf8.RuneCountInString(message.Name) > 32 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 32, false))
	}
	if message.Description != nil {
		if utf8.RuneCountInString(*message.Description) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.description", *message.Description, utf8.RuneCountInString(*message.Description), 128, false))
		}
	}
	if message.Health != nil {
		if *message.Health < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("message.health", *message.Health, 0, true))
		}
	}
	if message.Health != nil {
		if *message.Health > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("message.health", *message.Health, 1e+07, false))
		}
	}
	if message.Experience != nil {
		if *message.Experience < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("message.experience", *message.Experience, 0, true))
		}
	}
	if message.Experience != nil {
		if *message.Experience > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("message.experience", *message.Experience, 1e+07, false))
		}
	}
	return
}

// ValidateUpdateCharacterRequest runs the validations defined on
// UpdateCharacterRequest.
func ValidateUpdateCharacterRequest(message *characterpb.UpdateCharacterRequest) (err error) {
	if utf8.RuneCountInString(message.Name) > 32 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.name", message.Name, utf8.RuneCountInString(message.Name), 32, false))
	}
	if message.Description != nil {
		if utf8.RuneCountInString(*message.Description) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.description", *message.Description, utf8.RuneCountInString(*message.Description), 128, false))
		}
	}
	if message.Health != nil {
		if *message.Health < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("message.health", *message.Health, 0, true))
		}
	}
	if message.Health != nil {
		if *message.Health > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("message.health", *message.Health, 1e+07, false))
		}
	}
	if message.Experience != nil {
		if *message.Experience < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("message.experience", *message.Experience, 0, true))
		}
	}
	if message.Experience != nil {
		if *message.Experience > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("message.experience", *message.Experience, 1e+07, false))
		}
	}
	return
}
