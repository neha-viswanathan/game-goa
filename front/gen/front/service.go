// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Front service
//
// Command:
// $ goa gen front/design

package front

import (
	"context"
)

// The front service is the consumer facing API. It proxies the call to the
// backend services.
type Service interface {
	// Create a new character
	CreateCharacter(context.Context, *Character) (res *Character, err error)
	// Get a character by name
	GetCharacter(context.Context, *GetCharacterPayload) (res *Character, err error)
	// List all characters
	ListCharacters(context.Context) (res []*Character, err error)
	// Update a given character
	UpdateCharacter(context.Context, *Character) (res *Character, err error)
	// Delete a given character
	DeleteCharacter(context.Context, *DeleteCharacterPayload) (err error)
	// Create a new item
	CreateItem(context.Context, *Item) (res *Item, err error)
	// Get an item by name
	GetItem(context.Context, *GetItemPayload) (res *Item, err error)
	// List all items
	ListItems(context.Context) (res []*Item, err error)
	// Update a given item
	UpdateItem(context.Context, *Item) (res *Item, err error)
	// Delete a given item
	DeleteItem(context.Context, *DeleteItemPayload) (err error)
	// Add an item to a character's inventory
	AddInventoryItem(context.Context, *AddInventoryItemPayload) (err error)
	// Remove an item from a character's inventory
	RemoveInventoryItem(context.Context, *RemoveInventoryItemPayload) (err error)
	// Get a character's inventory
	GetInventory(context.Context, *GetInventoryPayload) (res []string, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Front"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [13]string{"createCharacter", "getCharacter", "listCharacters", "updateCharacter", "deleteCharacter", "createItem", "getItem", "listItems", "updateItem", "deleteItem", "addInventoryItem", "removeInventoryItem", "getInventory"}

// AddInventoryItemPayload is the payload type of the Front service
// addInventoryItem method.
type AddInventoryItemPayload struct {
	// character's name
	Character string
	// item's name
	Item string
}

// Character is the payload type of the Front service createCharacter method.
type Character struct {
	// Name, which is a unique identifier
	Name string
	// Description
	Description string
	// Current health
	Health uint32
	// Amount of experience
	Experience uint32
}

// character already exists
type CharacterAlreadyExists struct {
	// character already exists
	Message string
	// character name
	Name string
}

// character not found
type CharacterNotFound struct {
	// character not found
	Message string
	// character name
	Name string
}

// DeleteCharacterPayload is the payload type of the Front service
// deleteCharacter method.
type DeleteCharacterPayload struct {
	// name of character to be deleted
	Name string
}

// DeleteItemPayload is the payload type of the Front service deleteItem method.
type DeleteItemPayload struct {
	// name of item to be deleted
	Name string
}

// GetCharacterPayload is the payload type of the Front service getCharacter
// method.
type GetCharacterPayload struct {
	// name of character to be retrieved
	Name string
}

// GetInventoryPayload is the payload type of the Front service getInventory
// method.
type GetInventoryPayload struct {
	// name of character
	Character string
}

// GetItemPayload is the payload type of the Front service getItem method.
type GetItemPayload struct {
	// name of item to be retrieved
	Name string
}

// Item is the payload type of the Front service createItem method.
type Item struct {
	// Name, which is a unique identifier
	Name string
	// Description
	Description string
	// Amount of damage
	Damage uint32
	// Amount of healing
	Healing uint32
	// Amount of protection
	Protection uint32
}

// item already exists
type ItemAlreadyExists struct {
	// item already exists
	Message string
	// item name
	Name string
}

// item not found
type ItemNotFound struct {
	// item not found
	Message string
	// item name
	Name string
}

// RemoveInventoryItemPayload is the payload type of the Front service
// removeInventoryItem method.
type RemoveInventoryItemPayload struct {
	// character's name
	Character string
	// item's name
	Item string
}

// Error returns an error description.
func (e *CharacterAlreadyExists) Error() string {
	return "character already exists"
}

// ErrorName returns "CharacterAlreadyExists".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *CharacterAlreadyExists) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "CharacterAlreadyExists".
func (e *CharacterAlreadyExists) GoaErrorName() string {
	return "CharacterAlreadyExists"
}

// Error returns an error description.
func (e *CharacterNotFound) Error() string {
	return "character not found"
}

// ErrorName returns "CharacterNotFound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *CharacterNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "CharacterNotFound".
func (e *CharacterNotFound) GoaErrorName() string {
	return "CharacterNotFound"
}

// Error returns an error description.
func (e *ItemAlreadyExists) Error() string {
	return "item already exists"
}

// ErrorName returns "ItemAlreadyExists".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ItemAlreadyExists) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ItemAlreadyExists".
func (e *ItemAlreadyExists) GoaErrorName() string {
	return "ItemAlreadyExists"
}

// Error returns an error description.
func (e *ItemNotFound) Error() string {
	return "item not found"
}

// ErrorName returns "ItemNotFound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ItemNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ItemNotFound".
func (e *ItemNotFound) GoaErrorName() string {
	return "ItemNotFound"
}
