// Code generated by goa v3.11.2, DO NOT EDIT.
//
// front HTTP client CLI support package
//
// Command:
// $ goa gen front/design

package cli

import (
	"flag"
	"fmt"
	frontc "front/gen/http/front/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `front (create-character|get-character|list-characters|update-character|delete-character|create-item|get-item|list-items|update-item|delete-item|add-inventory-item|remove-inventory-item|get-inventory)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` front create-character --body '{
      "description": "Savior of Princess Zelda",
      "experience": 3453331,
      "health": 6413167,
      "name": "Link"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		frontFlags = flag.NewFlagSet("front", flag.ContinueOnError)

		frontCreateCharacterFlags    = flag.NewFlagSet("create-character", flag.ExitOnError)
		frontCreateCharacterBodyFlag = frontCreateCharacterFlags.String("body", "REQUIRED", "")

		frontGetCharacterFlags    = flag.NewFlagSet("get-character", flag.ExitOnError)
		frontGetCharacterNameFlag = frontGetCharacterFlags.String("name", "REQUIRED", "name of character to be retrieved")

		frontListCharactersFlags = flag.NewFlagSet("list-characters", flag.ExitOnError)

		frontUpdateCharacterFlags    = flag.NewFlagSet("update-character", flag.ExitOnError)
		frontUpdateCharacterBodyFlag = frontUpdateCharacterFlags.String("body", "REQUIRED", "")
		frontUpdateCharacterNameFlag = frontUpdateCharacterFlags.String("name", "REQUIRED", "Name, which is a unique identifier")

		frontDeleteCharacterFlags    = flag.NewFlagSet("delete-character", flag.ExitOnError)
		frontDeleteCharacterNameFlag = frontDeleteCharacterFlags.String("name", "REQUIRED", "name of character to be deleted")

		frontCreateItemFlags    = flag.NewFlagSet("create-item", flag.ExitOnError)
		frontCreateItemBodyFlag = frontCreateItemFlags.String("body", "REQUIRED", "")

		frontGetItemFlags    = flag.NewFlagSet("get-item", flag.ExitOnError)
		frontGetItemNameFlag = frontGetItemFlags.String("name", "REQUIRED", "name of item to be retrieved")

		frontListItemsFlags = flag.NewFlagSet("list-items", flag.ExitOnError)

		frontUpdateItemFlags    = flag.NewFlagSet("update-item", flag.ExitOnError)
		frontUpdateItemBodyFlag = frontUpdateItemFlags.String("body", "REQUIRED", "")
		frontUpdateItemNameFlag = frontUpdateItemFlags.String("name", "REQUIRED", "Name, which is a unique identifier")

		frontDeleteItemFlags    = flag.NewFlagSet("delete-item", flag.ExitOnError)
		frontDeleteItemNameFlag = frontDeleteItemFlags.String("name", "REQUIRED", "name of item to be deleted")

		frontAddInventoryItemFlags         = flag.NewFlagSet("add-inventory-item", flag.ExitOnError)
		frontAddInventoryItemCharacterFlag = frontAddInventoryItemFlags.String("character", "REQUIRED", "character's name")
		frontAddInventoryItemItemFlag      = frontAddInventoryItemFlags.String("item", "REQUIRED", "item's name")

		frontRemoveInventoryItemFlags         = flag.NewFlagSet("remove-inventory-item", flag.ExitOnError)
		frontRemoveInventoryItemCharacterFlag = frontRemoveInventoryItemFlags.String("character", "REQUIRED", "character's name")
		frontRemoveInventoryItemItemFlag      = frontRemoveInventoryItemFlags.String("item", "REQUIRED", "item's name")

		frontGetInventoryFlags         = flag.NewFlagSet("get-inventory", flag.ExitOnError)
		frontGetInventoryCharacterFlag = frontGetInventoryFlags.String("character", "REQUIRED", "name of character")
	)
	frontFlags.Usage = frontUsage
	frontCreateCharacterFlags.Usage = frontCreateCharacterUsage
	frontGetCharacterFlags.Usage = frontGetCharacterUsage
	frontListCharactersFlags.Usage = frontListCharactersUsage
	frontUpdateCharacterFlags.Usage = frontUpdateCharacterUsage
	frontDeleteCharacterFlags.Usage = frontDeleteCharacterUsage
	frontCreateItemFlags.Usage = frontCreateItemUsage
	frontGetItemFlags.Usage = frontGetItemUsage
	frontListItemsFlags.Usage = frontListItemsUsage
	frontUpdateItemFlags.Usage = frontUpdateItemUsage
	frontDeleteItemFlags.Usage = frontDeleteItemUsage
	frontAddInventoryItemFlags.Usage = frontAddInventoryItemUsage
	frontRemoveInventoryItemFlags.Usage = frontRemoveInventoryItemUsage
	frontGetInventoryFlags.Usage = frontGetInventoryUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "front":
			svcf = frontFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "front":
			switch epn {
			case "create-character":
				epf = frontCreateCharacterFlags

			case "get-character":
				epf = frontGetCharacterFlags

			case "list-characters":
				epf = frontListCharactersFlags

			case "update-character":
				epf = frontUpdateCharacterFlags

			case "delete-character":
				epf = frontDeleteCharacterFlags

			case "create-item":
				epf = frontCreateItemFlags

			case "get-item":
				epf = frontGetItemFlags

			case "list-items":
				epf = frontListItemsFlags

			case "update-item":
				epf = frontUpdateItemFlags

			case "delete-item":
				epf = frontDeleteItemFlags

			case "add-inventory-item":
				epf = frontAddInventoryItemFlags

			case "remove-inventory-item":
				epf = frontRemoveInventoryItemFlags

			case "get-inventory":
				epf = frontGetInventoryFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "front":
			c := frontc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-character":
				endpoint = c.CreateCharacter()
				data, err = frontc.BuildCreateCharacterPayload(*frontCreateCharacterBodyFlag)
			case "get-character":
				endpoint = c.GetCharacter()
				data, err = frontc.BuildGetCharacterPayload(*frontGetCharacterNameFlag)
			case "list-characters":
				endpoint = c.ListCharacters()
				data = nil
			case "update-character":
				endpoint = c.UpdateCharacter()
				data, err = frontc.BuildUpdateCharacterPayload(*frontUpdateCharacterBodyFlag, *frontUpdateCharacterNameFlag)
			case "delete-character":
				endpoint = c.DeleteCharacter()
				data, err = frontc.BuildDeleteCharacterPayload(*frontDeleteCharacterNameFlag)
			case "create-item":
				endpoint = c.CreateItem()
				data, err = frontc.BuildCreateItemPayload(*frontCreateItemBodyFlag)
			case "get-item":
				endpoint = c.GetItem()
				data, err = frontc.BuildGetItemPayload(*frontGetItemNameFlag)
			case "list-items":
				endpoint = c.ListItems()
				data = nil
			case "update-item":
				endpoint = c.UpdateItem()
				data, err = frontc.BuildUpdateItemPayload(*frontUpdateItemBodyFlag, *frontUpdateItemNameFlag)
			case "delete-item":
				endpoint = c.DeleteItem()
				data, err = frontc.BuildDeleteItemPayload(*frontDeleteItemNameFlag)
			case "add-inventory-item":
				endpoint = c.AddInventoryItem()
				data, err = frontc.BuildAddInventoryItemPayload(*frontAddInventoryItemCharacterFlag, *frontAddInventoryItemItemFlag)
			case "remove-inventory-item":
				endpoint = c.RemoveInventoryItem()
				data, err = frontc.BuildRemoveInventoryItemPayload(*frontRemoveInventoryItemCharacterFlag, *frontRemoveInventoryItemItemFlag)
			case "get-inventory":
				endpoint = c.GetInventory()
				data, err = frontc.BuildGetInventoryPayload(*frontGetInventoryCharacterFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// frontUsage displays the usage of the front command and its subcommands.
func frontUsage() {
	fmt.Fprintf(os.Stderr, `The front service is the consumer facing API. It proxies the call to the backend services.
Usage:
    %[1]s [globalflags] front COMMAND [flags]

COMMAND:
    create-character: Create a new character
    get-character: Get a character by name
    list-characters: List all characters
    update-character: Update a given character
    delete-character: Delete a given character
    create-item: Create a new item
    get-item: Get an item by name
    list-items: List all items
    update-item: Update a given item
    delete-item: Delete a given item
    add-inventory-item: Add an item to a character's inventory
    remove-inventory-item: Remove an item from a character's inventory
    get-inventory: Get a character's inventory

Additional help:
    %[1]s front COMMAND --help
`, os.Args[0])
}
func frontCreateCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front create-character -body JSON

Create a new character
    -body JSON: 

Example:
    %[1]s front create-character --body '{
      "description": "Savior of Princess Zelda",
      "experience": 3453331,
      "health": 6413167,
      "name": "Link"
   }'
`, os.Args[0])
}

func frontGetCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front get-character -name STRING

Get a character by name
    -name STRING: name of character to be retrieved

Example:
    %[1]s front get-character --name "Occaecati nesciunt."
`, os.Args[0])
}

func frontListCharactersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front list-characters

List all characters

Example:
    %[1]s front list-characters
`, os.Args[0])
}

func frontUpdateCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front update-character -body JSON -name STRING

Update a given character
    -body JSON: 
    -name STRING: Name, which is a unique identifier

Example:
    %[1]s front update-character --body '{
      "description": "Savior of Princess Zelda",
      "experience": 1616326,
      "health": 1962451
   }' --name "Link"
`, os.Args[0])
}

func frontDeleteCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front delete-character -name STRING

Delete a given character
    -name STRING: name of character to be deleted

Example:
    %[1]s front delete-character --name "Doloribus a."
`, os.Args[0])
}

func frontCreateItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front create-item -body JSON

Create a new item
    -body JSON: 

Example:
    %[1]s front create-item --body '{
      "damage": 308475,
      "description": "Restores health",
      "healing": 363332,
      "name": "Potion",
      "protection": 6450
   }'
`, os.Args[0])
}

func frontGetItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front get-item -name STRING

Get an item by name
    -name STRING: name of item to be retrieved

Example:
    %[1]s front get-item --name "Id sed et."
`, os.Args[0])
}

func frontListItemsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front list-items

List all items

Example:
    %[1]s front list-items
`, os.Args[0])
}

func frontUpdateItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front update-item -body JSON -name STRING

Update a given item
    -body JSON: 
    -name STRING: Name, which is a unique identifier

Example:
    %[1]s front update-item --body '{
      "damage": 797739,
      "description": "Restores health",
      "healing": 473315,
      "protection": 7220
   }' --name "Potion"
`, os.Args[0])
}

func frontDeleteItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front delete-item -name STRING

Delete a given item
    -name STRING: name of item to be deleted

Example:
    %[1]s front delete-item --name "Harum in minus deserunt occaecati."
`, os.Args[0])
}

func frontAddInventoryItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front add-inventory-item -character STRING -item STRING

Add an item to a character's inventory
    -character STRING: character's name
    -item STRING: item's name

Example:
    %[1]s front add-inventory-item --character "Et qui consequatur dolorum deserunt facilis sit." --item "Quas deleniti accusantium quis consequatur perferendis."
`, os.Args[0])
}

func frontRemoveInventoryItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front remove-inventory-item -character STRING -item STRING

Remove an item from a character's inventory
    -character STRING: character's name
    -item STRING: item's name

Example:
    %[1]s front remove-inventory-item --character "Tempora facere." --item "Aut qui optio."
`, os.Args[0])
}

func frontGetInventoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] front get-inventory -character STRING

Get a character's inventory
    -character STRING: name of character

Example:
    %[1]s front get-inventory --character "Cupiditate aspernatur ut adipisci."
`, os.Args[0])
}
