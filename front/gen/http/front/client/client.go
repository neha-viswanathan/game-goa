// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Front client HTTP transport
//
// Command:
// $ goa gen front/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Front service endpoint HTTP clients.
type Client struct {
	// CreateCharacter Doer is the HTTP client used to make requests to the
	// createCharacter endpoint.
	CreateCharacterDoer goahttp.Doer

	// GetCharacter Doer is the HTTP client used to make requests to the
	// getCharacter endpoint.
	GetCharacterDoer goahttp.Doer

	// ListCharacters Doer is the HTTP client used to make requests to the
	// listCharacters endpoint.
	ListCharactersDoer goahttp.Doer

	// UpdateCharacter Doer is the HTTP client used to make requests to the
	// updateCharacter endpoint.
	UpdateCharacterDoer goahttp.Doer

	// DeleteCharacter Doer is the HTTP client used to make requests to the
	// deleteCharacter endpoint.
	DeleteCharacterDoer goahttp.Doer

	// CreateItem Doer is the HTTP client used to make requests to the createItem
	// endpoint.
	CreateItemDoer goahttp.Doer

	// GetItem Doer is the HTTP client used to make requests to the getItem
	// endpoint.
	GetItemDoer goahttp.Doer

	// ListItems Doer is the HTTP client used to make requests to the listItems
	// endpoint.
	ListItemsDoer goahttp.Doer

	// UpdateItem Doer is the HTTP client used to make requests to the updateItem
	// endpoint.
	UpdateItemDoer goahttp.Doer

	// DeleteItem Doer is the HTTP client used to make requests to the deleteItem
	// endpoint.
	DeleteItemDoer goahttp.Doer

	// AddInventoryItem Doer is the HTTP client used to make requests to the
	// addInventoryItem endpoint.
	AddInventoryItemDoer goahttp.Doer

	// RemoveInventoryItem Doer is the HTTP client used to make requests to the
	// removeInventoryItem endpoint.
	RemoveInventoryItemDoer goahttp.Doer

	// GetInventory Doer is the HTTP client used to make requests to the
	// getInventory endpoint.
	GetInventoryDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the Front service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateCharacterDoer:     doer,
		GetCharacterDoer:        doer,
		ListCharactersDoer:      doer,
		UpdateCharacterDoer:     doer,
		DeleteCharacterDoer:     doer,
		CreateItemDoer:          doer,
		GetItemDoer:             doer,
		ListItemsDoer:           doer,
		UpdateItemDoer:          doer,
		DeleteItemDoer:          doer,
		AddInventoryItemDoer:    doer,
		RemoveInventoryItemDoer: doer,
		GetInventoryDoer:        doer,
		RestoreResponseBody:     restoreBody,
		scheme:                  scheme,
		host:                    host,
		decoder:                 dec,
		encoder:                 enc,
	}
}

// CreateCharacter returns an endpoint that makes HTTP requests to the Front
// service createCharacter server.
func (c *Client) CreateCharacter() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateCharacterRequest(c.encoder)
		decodeResponse = DecodeCreateCharacterResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateCharacterRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCharacterDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Front", "createCharacter", err)
		}
		return decodeResponse(resp)
	}
}

// GetCharacter returns an endpoint that makes HTTP requests to the Front
// service getCharacter server.
func (c *Client) GetCharacter() goa.Endpoint {
	var (
		decodeResponse = DecodeGetCharacterResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetCharacterRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetCharacterDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Front", "getCharacter", err)
		}
		return decodeResponse(resp)
	}
}

// ListCharacters returns an endpoint that makes HTTP requests to the Front
// service listCharacters server.
func (c *Client) ListCharacters() goa.Endpoint {
	var (
		decodeResponse = DecodeListCharactersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListCharactersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListCharactersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Front", "listCharacters", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateCharacter returns an endpoint that makes HTTP requests to the Front
// service updateCharacter server.
func (c *Client) UpdateCharacter() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateCharacterRequest(c.encoder)
		decodeResponse = DecodeUpdateCharacterResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateCharacterRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateCharacterDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Front", "updateCharacter", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteCharacter returns an endpoint that makes HTTP requests to the Front
// service deleteCharacter server.
func (c *Client) DeleteCharacter() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteCharacterResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteCharacterRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteCharacterDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Front", "deleteCharacter", err)
		}
		return decodeResponse(resp)
	}
}

// CreateItem returns an endpoint that makes HTTP requests to the Front service
// createItem server.
func (c *Client) CreateItem() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateItemRequest(c.encoder)
		decodeResponse = DecodeCreateItemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateItemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateItemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Front", "createItem", err)
		}
		return decodeResponse(resp)
	}
}

// GetItem returns an endpoint that makes HTTP requests to the Front service
// getItem server.
func (c *Client) GetItem() goa.Endpoint {
	var (
		decodeResponse = DecodeGetItemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetItemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetItemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Front", "getItem", err)
		}
		return decodeResponse(resp)
	}
}

// ListItems returns an endpoint that makes HTTP requests to the Front service
// listItems server.
func (c *Client) ListItems() goa.Endpoint {
	var (
		decodeResponse = DecodeListItemsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListItemsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListItemsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Front", "listItems", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateItem returns an endpoint that makes HTTP requests to the Front service
// updateItem server.
func (c *Client) UpdateItem() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateItemRequest(c.encoder)
		decodeResponse = DecodeUpdateItemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateItemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateItemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Front", "updateItem", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteItem returns an endpoint that makes HTTP requests to the Front service
// deleteItem server.
func (c *Client) DeleteItem() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteItemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteItemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteItemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Front", "deleteItem", err)
		}
		return decodeResponse(resp)
	}
}

// AddInventoryItem returns an endpoint that makes HTTP requests to the Front
// service addInventoryItem server.
func (c *Client) AddInventoryItem() goa.Endpoint {
	var (
		decodeResponse = DecodeAddInventoryItemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAddInventoryItemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddInventoryItemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Front", "addInventoryItem", err)
		}
		return decodeResponse(resp)
	}
}

// RemoveInventoryItem returns an endpoint that makes HTTP requests to the
// Front service removeInventoryItem server.
func (c *Client) RemoveInventoryItem() goa.Endpoint {
	var (
		decodeResponse = DecodeRemoveInventoryItemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRemoveInventoryItemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RemoveInventoryItemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Front", "removeInventoryItem", err)
		}
		return decodeResponse(resp)
	}
}

// GetInventory returns an endpoint that makes HTTP requests to the Front
// service getInventory server.
func (c *Client) GetInventory() goa.Endpoint {
	var (
		decodeResponse = DecodeGetInventoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetInventoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetInventoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Front", "getInventory", err)
		}
		return decodeResponse(resp)
	}
}
