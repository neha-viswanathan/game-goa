// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Front HTTP client encoders and decoders
//
// Command:
// $ goa gen front/design

package client

import (
	"bytes"
	"context"
	front "front/gen/front"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateCharacterRequest instantiates a HTTP request object with method
// and path set to call the "Front" service "createCharacter" endpoint
func (c *Client) BuildCreateCharacterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCharacterFrontPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Front", "createCharacter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCharacterRequest returns an encoder for requests sent to the
// Front createCharacter server.
func EncodeCreateCharacterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*front.Character)
		if !ok {
			return goahttp.ErrInvalidType("Front", "createCharacter", "*front.Character", v)
		}
		body := NewCreateCharacterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Front", "createCharacter", err)
		}
		return nil
	}
}

// DecodeCreateCharacterResponse returns a decoder for responses returned by
// the Front createCharacter endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateCharacterResponse may return the following errors:
//   - "CharacterAlreadyExists" (type *front.CharacterAlreadyExists): http.StatusConflict
//   - error: internal error
func DecodeCreateCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateCharacterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "createCharacter", err)
			}
			err = ValidateCreateCharacterResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "createCharacter", err)
			}
			res := NewCreateCharacterCharacterCreated(&body)
			return res, nil
		case http.StatusConflict:
			var (
				body CreateCharacterCharacterAlreadyExistsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "createCharacter", err)
			}
			err = ValidateCreateCharacterCharacterAlreadyExistsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "createCharacter", err)
			}
			return nil, NewCreateCharacterCharacterAlreadyExists(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Front", "createCharacter", resp.StatusCode, string(body))
		}
	}
}

// BuildGetCharacterRequest instantiates a HTTP request object with method and
// path set to call the "Front" service "getCharacter" endpoint
func (c *Client) BuildGetCharacterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		name string
	)
	{
		p, ok := v.(*front.GetCharacterPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Front", "getCharacter", "*front.GetCharacterPayload", v)
		}
		name = p.Name
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCharacterFrontPath(name)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Front", "getCharacter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetCharacterResponse returns a decoder for responses returned by the
// Front getCharacter endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetCharacterResponse may return the following errors:
//   - "CharacterNotFound" (type *front.CharacterNotFound): http.StatusNotFound
//   - error: internal error
func DecodeGetCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCharacterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "getCharacter", err)
			}
			err = ValidateGetCharacterResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "getCharacter", err)
			}
			res := NewGetCharacterCharacterOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetCharacterCharacterNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "getCharacter", err)
			}
			err = ValidateGetCharacterCharacterNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "getCharacter", err)
			}
			return nil, NewGetCharacterCharacterNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Front", "getCharacter", resp.StatusCode, string(body))
		}
	}
}

// BuildListCharactersRequest instantiates a HTTP request object with method
// and path set to call the "Front" service "listCharacters" endpoint
func (c *Client) BuildListCharactersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListCharactersFrontPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Front", "listCharacters", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListCharactersResponse returns a decoder for responses returned by the
// Front listCharacters endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeListCharactersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListCharactersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "listCharacters", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateCharacterResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "listCharacters", err)
			}
			res := NewListCharactersCharacterOK(body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Front", "listCharacters", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateCharacterRequest instantiates a HTTP request object with method
// and path set to call the "Front" service "updateCharacter" endpoint
func (c *Client) BuildUpdateCharacterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		name string
	)
	{
		p, ok := v.(*front.Character)
		if !ok {
			return nil, goahttp.ErrInvalidType("Front", "updateCharacter", "*front.Character", v)
		}
		name = p.Name
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCharacterFrontPath(name)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Front", "updateCharacter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateCharacterRequest returns an encoder for requests sent to the
// Front updateCharacter server.
func EncodeUpdateCharacterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*front.Character)
		if !ok {
			return goahttp.ErrInvalidType("Front", "updateCharacter", "*front.Character", v)
		}
		body := NewUpdateCharacterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Front", "updateCharacter", err)
		}
		return nil
	}
}

// DecodeUpdateCharacterResponse returns a decoder for responses returned by
// the Front updateCharacter endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateCharacterResponse may return the following errors:
//   - "CharacterNotFound" (type *front.CharacterNotFound): http.StatusNotFound
//   - error: internal error
func DecodeUpdateCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateCharacterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "updateCharacter", err)
			}
			err = ValidateUpdateCharacterResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "updateCharacter", err)
			}
			res := NewUpdateCharacterCharacterOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body UpdateCharacterCharacterNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "updateCharacter", err)
			}
			err = ValidateUpdateCharacterCharacterNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "updateCharacter", err)
			}
			return nil, NewUpdateCharacterCharacterNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Front", "updateCharacter", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteCharacterRequest instantiates a HTTP request object with method
// and path set to call the "Front" service "deleteCharacter" endpoint
func (c *Client) BuildDeleteCharacterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		name string
	)
	{
		p, ok := v.(*front.DeleteCharacterPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Front", "deleteCharacter", "*front.DeleteCharacterPayload", v)
		}
		name = p.Name
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteCharacterFrontPath(name)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Front", "deleteCharacter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteCharacterResponse returns a decoder for responses returned by
// the Front deleteCharacter endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeDeleteCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Front", "deleteCharacter", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateItemRequest instantiates a HTTP request object with method and
// path set to call the "Front" service "createItem" endpoint
func (c *Client) BuildCreateItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateItemFrontPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Front", "createItem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateItemRequest returns an encoder for requests sent to the Front
// createItem server.
func EncodeCreateItemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*front.Item)
		if !ok {
			return goahttp.ErrInvalidType("Front", "createItem", "*front.Item", v)
		}
		body := NewCreateItemRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Front", "createItem", err)
		}
		return nil
	}
}

// DecodeCreateItemResponse returns a decoder for responses returned by the
// Front createItem endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateItemResponse may return the following errors:
//   - "ItemAlreadyExists" (type *front.ItemAlreadyExists): http.StatusConflict
//   - error: internal error
func DecodeCreateItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateItemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "createItem", err)
			}
			err = ValidateCreateItemResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "createItem", err)
			}
			res := NewCreateItemItemCreated(&body)
			return res, nil
		case http.StatusConflict:
			var (
				body CreateItemItemAlreadyExistsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "createItem", err)
			}
			err = ValidateCreateItemItemAlreadyExistsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "createItem", err)
			}
			return nil, NewCreateItemItemAlreadyExists(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Front", "createItem", resp.StatusCode, string(body))
		}
	}
}

// BuildGetItemRequest instantiates a HTTP request object with method and path
// set to call the "Front" service "getItem" endpoint
func (c *Client) BuildGetItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		name string
	)
	{
		p, ok := v.(*front.GetItemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Front", "getItem", "*front.GetItemPayload", v)
		}
		name = p.Name
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetItemFrontPath(name)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Front", "getItem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetItemResponse returns a decoder for responses returned by the Front
// getItem endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetItemResponse may return the following errors:
//   - "ItemNotFound" (type *front.ItemNotFound): http.StatusNotFound
//   - error: internal error
func DecodeGetItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetItemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "getItem", err)
			}
			err = ValidateGetItemResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "getItem", err)
			}
			res := NewGetItemItemOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetItemItemNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "getItem", err)
			}
			err = ValidateGetItemItemNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "getItem", err)
			}
			return nil, NewGetItemItemNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Front", "getItem", resp.StatusCode, string(body))
		}
	}
}

// BuildListItemsRequest instantiates a HTTP request object with method and
// path set to call the "Front" service "listItems" endpoint
func (c *Client) BuildListItemsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListItemsFrontPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Front", "listItems", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListItemsResponse returns a decoder for responses returned by the
// Front listItems endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListItemsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListItemsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "listItems", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateItemResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "listItems", err)
			}
			res := NewListItemsItemOK(body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Front", "listItems", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateItemRequest instantiates a HTTP request object with method and
// path set to call the "Front" service "updateItem" endpoint
func (c *Client) BuildUpdateItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		name string
	)
	{
		p, ok := v.(*front.Item)
		if !ok {
			return nil, goahttp.ErrInvalidType("Front", "updateItem", "*front.Item", v)
		}
		name = p.Name
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateItemFrontPath(name)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Front", "updateItem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateItemRequest returns an encoder for requests sent to the Front
// updateItem server.
func EncodeUpdateItemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*front.Item)
		if !ok {
			return goahttp.ErrInvalidType("Front", "updateItem", "*front.Item", v)
		}
		body := NewUpdateItemRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Front", "updateItem", err)
		}
		return nil
	}
}

// DecodeUpdateItemResponse returns a decoder for responses returned by the
// Front updateItem endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateItemResponse may return the following errors:
//   - "ItemNotFound" (type *front.ItemNotFound): http.StatusNotFound
//   - error: internal error
func DecodeUpdateItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateItemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "updateItem", err)
			}
			err = ValidateUpdateItemResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "updateItem", err)
			}
			res := NewUpdateItemItemOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body UpdateItemItemNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "updateItem", err)
			}
			err = ValidateUpdateItemItemNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "updateItem", err)
			}
			return nil, NewUpdateItemItemNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Front", "updateItem", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteItemRequest instantiates a HTTP request object with method and
// path set to call the "Front" service "deleteItem" endpoint
func (c *Client) BuildDeleteItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		name string
	)
	{
		p, ok := v.(*front.DeleteItemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Front", "deleteItem", "*front.DeleteItemPayload", v)
		}
		name = p.Name
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteItemFrontPath(name)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Front", "deleteItem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteItemResponse returns a decoder for responses returned by the
// Front deleteItem endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeDeleteItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Front", "deleteItem", resp.StatusCode, string(body))
		}
	}
}

// BuildAddInventoryItemRequest instantiates a HTTP request object with method
// and path set to call the "Front" service "addInventoryItem" endpoint
func (c *Client) BuildAddInventoryItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		character string
		item      string
	)
	{
		p, ok := v.(*front.AddInventoryItemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Front", "addInventoryItem", "*front.AddInventoryItemPayload", v)
		}
		character = p.Character
		item = p.Item
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddInventoryItemFrontPath(character, item)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Front", "addInventoryItem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAddInventoryItemResponse returns a decoder for responses returned by
// the Front addInventoryItem endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeAddInventoryItemResponse may return the following errors:
//   - "CharacterNotFound" (type *front.CharacterNotFound): http.StatusNotFound
//   - "ItemNotFound" (type *front.ItemNotFound): http.StatusNotFound
//   - error: internal error
func DecodeAddInventoryItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			en := resp.Header.Get("goa-error")
			switch en {
			case "CharacterNotFound":
				var (
					body AddInventoryItemCharacterNotFoundResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("Front", "addInventoryItem", err)
				}
				err = ValidateAddInventoryItemCharacterNotFoundResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("Front", "addInventoryItem", err)
				}
				return nil, NewAddInventoryItemCharacterNotFound(&body)
			case "ItemNotFound":
				var (
					body AddInventoryItemItemNotFoundResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("Front", "addInventoryItem", err)
				}
				err = ValidateAddInventoryItemItemNotFoundResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("Front", "addInventoryItem", err)
				}
				return nil, NewAddInventoryItemItemNotFound(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("Front", "addInventoryItem", resp.StatusCode, string(body))
			}
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Front", "addInventoryItem", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveInventoryItemRequest instantiates a HTTP request object with
// method and path set to call the "Front" service "removeInventoryItem"
// endpoint
func (c *Client) BuildRemoveInventoryItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		character string
		item      string
	)
	{
		p, ok := v.(*front.RemoveInventoryItemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Front", "removeInventoryItem", "*front.RemoveInventoryItemPayload", v)
		}
		character = p.Character
		item = p.Item
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveInventoryItemFrontPath(character, item)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Front", "removeInventoryItem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRemoveInventoryItemResponse returns a decoder for responses returned
// by the Front removeInventoryItem endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeRemoveInventoryItemResponse may return the following errors:
//   - "CharacterNotFound" (type *front.CharacterNotFound): http.StatusNotFound
//   - error: internal error
func DecodeRemoveInventoryItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body RemoveInventoryItemCharacterNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "removeInventoryItem", err)
			}
			err = ValidateRemoveInventoryItemCharacterNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "removeInventoryItem", err)
			}
			return nil, NewRemoveInventoryItemCharacterNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Front", "removeInventoryItem", resp.StatusCode, string(body))
		}
	}
}

// BuildGetInventoryRequest instantiates a HTTP request object with method and
// path set to call the "Front" service "getInventory" endpoint
func (c *Client) BuildGetInventoryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		character string
	)
	{
		p, ok := v.(*front.GetInventoryPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Front", "getInventory", "*front.GetInventoryPayload", v)
		}
		character = p.Character
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetInventoryFrontPath(character)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Front", "getInventory", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetInventoryResponse returns a decoder for responses returned by the
// Front getInventory endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetInventoryResponse may return the following errors:
//   - "CharacterNotFound" (type *front.CharacterNotFound): http.StatusNotFound
//   - error: internal error
func DecodeGetInventoryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "getInventory", err)
			}
			return body, nil
		case http.StatusNotFound:
			var (
				body GetInventoryCharacterNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Front", "getInventory", err)
			}
			err = ValidateGetInventoryCharacterNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Front", "getInventory", err)
			}
			return nil, NewGetInventoryCharacterNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Front", "getInventory", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCharacterResponseToFrontCharacter builds a value of type
// *front.Character from a value of type *CharacterResponse.
func unmarshalCharacterResponseToFrontCharacter(v *CharacterResponse) *front.Character {
	res := &front.Character{
		Name: *v.Name,
	}
	if v.Description != nil {
		res.Description = *v.Description
	}
	if v.Health != nil {
		res.Health = *v.Health
	}
	if v.Experience != nil {
		res.Experience = *v.Experience
	}
	if v.Description == nil {
		res.Description = ""
	}
	if v.Health == nil {
		res.Health = 100
	}
	if v.Experience == nil {
		res.Experience = 0
	}

	return res
}

// unmarshalItemResponseToFrontItem builds a value of type *front.Item from a
// value of type *ItemResponse.
func unmarshalItemResponseToFrontItem(v *ItemResponse) *front.Item {
	res := &front.Item{
		Name:        *v.Name,
		Description: *v.Description,
	}
	if v.Damage != nil {
		res.Damage = *v.Damage
	}
	if v.Healing != nil {
		res.Healing = *v.Healing
	}
	if v.Protection != nil {
		res.Protection = *v.Protection
	}
	if v.Damage == nil {
		res.Damage = 0
	}
	if v.Healing == nil {
		res.Healing = 0
	}
	if v.Protection == nil {
		res.Protection = 0
	}

	return res
}
