// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Front HTTP client types
//
// Command:
// $ goa gen front/design

package client

import (
	front "front/gen/front"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateCharacterRequestBody is the type of the "Front" service
// "createCharacter" endpoint HTTP request body.
type CreateCharacterRequestBody struct {
	// Name, which is a unique identifier
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description string `form:"description" json:"description" xml:"description"`
	// Current health
	Health uint32 `form:"health" json:"health" xml:"health"`
	// Amount of experience
	Experience uint32 `form:"experience" json:"experience" xml:"experience"`
}

// UpdateCharacterRequestBody is the type of the "Front" service
// "updateCharacter" endpoint HTTP request body.
type UpdateCharacterRequestBody struct {
	// Description
	Description string `form:"description" json:"description" xml:"description"`
	// Current health
	Health uint32 `form:"health" json:"health" xml:"health"`
	// Amount of experience
	Experience uint32 `form:"experience" json:"experience" xml:"experience"`
}

// CreateItemRequestBody is the type of the "Front" service "createItem"
// endpoint HTTP request body.
type CreateItemRequestBody struct {
	// Name, which is a unique identifier
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description string `form:"description" json:"description" xml:"description"`
	// Amount of damage
	Damage uint32 `form:"damage" json:"damage" xml:"damage"`
	// Amount of healing
	Healing uint32 `form:"healing" json:"healing" xml:"healing"`
	// Amount of protection
	Protection uint32 `form:"protection" json:"protection" xml:"protection"`
}

// UpdateItemRequestBody is the type of the "Front" service "updateItem"
// endpoint HTTP request body.
type UpdateItemRequestBody struct {
	// Description
	Description string `form:"description" json:"description" xml:"description"`
	// Amount of damage
	Damage uint32 `form:"damage" json:"damage" xml:"damage"`
	// Amount of healing
	Healing uint32 `form:"healing" json:"healing" xml:"healing"`
	// Amount of protection
	Protection uint32 `form:"protection" json:"protection" xml:"protection"`
}

// AddInventoryItemRequestBody is the type of the "Front" service
// "addInventoryItem" endpoint HTTP request body.
type AddInventoryItemRequestBody struct {
	// item's count
	Count uint32 `form:"count" json:"count" xml:"count"`
}

// RemoveInventoryItemRequestBody is the type of the "Front" service
// "removeInventoryItem" endpoint HTTP request body.
type RemoveInventoryItemRequestBody struct {
	// item's count
	Count uint32 `form:"count" json:"count" xml:"count"`
}

// CreateCharacterResponseBody is the type of the "Front" service
// "createCharacter" endpoint HTTP response body.
type CreateCharacterResponseBody struct {
	// Name, which is a unique identifier
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Current health
	Health *uint32 `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Amount of experience
	Experience *uint32 `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// GetCharacterResponseBody is the type of the "Front" service "getCharacter"
// endpoint HTTP response body.
type GetCharacterResponseBody struct {
	// Name, which is a unique identifier
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Current health
	Health *uint32 `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Amount of experience
	Experience *uint32 `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// ListCharactersResponseBody is the type of the "Front" service
// "listCharacters" endpoint HTTP response body.
type ListCharactersResponseBody []*CharacterResponse

// UpdateCharacterResponseBody is the type of the "Front" service
// "updateCharacter" endpoint HTTP response body.
type UpdateCharacterResponseBody struct {
	// Name, which is a unique identifier
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Current health
	Health *uint32 `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Amount of experience
	Experience *uint32 `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// CreateItemResponseBody is the type of the "Front" service "createItem"
// endpoint HTTP response body.
type CreateItemResponseBody struct {
	// Name, which is a unique identifier
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage
	Damage *uint32 `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Amount of healing
	Healing *uint32 `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Amount of protection
	Protection *uint32 `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// GetItemResponseBody is the type of the "Front" service "getItem" endpoint
// HTTP response body.
type GetItemResponseBody struct {
	// Name, which is a unique identifier
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage
	Damage *uint32 `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Amount of healing
	Healing *uint32 `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Amount of protection
	Protection *uint32 `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// ListItemsResponseBody is the type of the "Front" service "listItems"
// endpoint HTTP response body.
type ListItemsResponseBody []*ItemResponse

// UpdateItemResponseBody is the type of the "Front" service "updateItem"
// endpoint HTTP response body.
type UpdateItemResponseBody struct {
	// Name, which is a unique identifier
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage
	Damage *uint32 `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Amount of healing
	Healing *uint32 `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Amount of protection
	Protection *uint32 `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// GetInventoryResponseBody is the type of the "Front" service "getInventory"
// endpoint HTTP response body.
type GetInventoryResponseBody []*InventoryEntryResponse

// CreateCharacterCharacterAlreadyExistsResponseBody is the type of the "Front"
// service "createCharacter" endpoint HTTP response body for the
// "CharacterAlreadyExists" error.
type CreateCharacterCharacterAlreadyExistsResponseBody struct {
	// character already exists
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// character name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GetCharacterCharacterNotFoundResponseBody is the type of the "Front" service
// "getCharacter" endpoint HTTP response body for the "CharacterNotFound" error.
type GetCharacterCharacterNotFoundResponseBody struct {
	// character not found
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// character name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// UpdateCharacterCharacterNotFoundResponseBody is the type of the "Front"
// service "updateCharacter" endpoint HTTP response body for the
// "CharacterNotFound" error.
type UpdateCharacterCharacterNotFoundResponseBody struct {
	// character not found
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// character name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CreateItemItemAlreadyExistsResponseBody is the type of the "Front" service
// "createItem" endpoint HTTP response body for the "ItemAlreadyExists" error.
type CreateItemItemAlreadyExistsResponseBody struct {
	// item already exists
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// item name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GetItemItemNotFoundResponseBody is the type of the "Front" service "getItem"
// endpoint HTTP response body for the "ItemNotFound" error.
type GetItemItemNotFoundResponseBody struct {
	// item not found
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// item name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// UpdateItemItemNotFoundResponseBody is the type of the "Front" service
// "updateItem" endpoint HTTP response body for the "ItemNotFound" error.
type UpdateItemItemNotFoundResponseBody struct {
	// item not found
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// item name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// AddInventoryItemCharacterNotFoundResponseBody is the type of the "Front"
// service "addInventoryItem" endpoint HTTP response body for the
// "CharacterNotFound" error.
type AddInventoryItemCharacterNotFoundResponseBody struct {
	// character not found
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// character name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// AddInventoryItemItemNotFoundResponseBody is the type of the "Front" service
// "addInventoryItem" endpoint HTTP response body for the "ItemNotFound" error.
type AddInventoryItemItemNotFoundResponseBody struct {
	// item not found
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// item name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// AddInventoryItemItemCountNotValidResponseBody is the type of the "Front"
// service "addInventoryItem" endpoint HTTP response body for the
// "ItemCountNotValid" error.
type AddInventoryItemItemCountNotValidResponseBody struct {
	// item count not valid
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// item name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// RemoveInventoryItemCharacterNotFoundResponseBody is the type of the "Front"
// service "removeInventoryItem" endpoint HTTP response body for the
// "CharacterNotFound" error.
type RemoveInventoryItemCharacterNotFoundResponseBody struct {
	// character not found
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// character name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// RemoveInventoryItemItemCountNotValidResponseBody is the type of the "Front"
// service "removeInventoryItem" endpoint HTTP response body for the
// "ItemCountNotValid" error.
type RemoveInventoryItemItemCountNotValidResponseBody struct {
	// item count not valid
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// item name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GetInventoryCharacterNotFoundResponseBody is the type of the "Front" service
// "getInventory" endpoint HTTP response body for the "CharacterNotFound" error.
type GetInventoryCharacterNotFoundResponseBody struct {
	// character not found
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// character name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CharacterResponse is used to define fields on response body types.
type CharacterResponse struct {
	// Name, which is a unique identifier
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Current health
	Health *uint32 `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Amount of experience
	Experience *uint32 `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// ItemResponse is used to define fields on response body types.
type ItemResponse struct {
	// Name, which is a unique identifier
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage
	Damage *uint32 `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Amount of healing
	Healing *uint32 `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Amount of protection
	Protection *uint32 `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// InventoryEntryResponse is used to define fields on response body types.
type InventoryEntryResponse struct {
	// item name
	Item *string `form:"item,omitempty" json:"item,omitempty" xml:"item,omitempty"`
	// item count
	Count *uint32 `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
}

// NewCreateCharacterRequestBody builds the HTTP request body from the payload
// of the "createCharacter" endpoint of the "Front" service.
func NewCreateCharacterRequestBody(p *front.Character) *CreateCharacterRequestBody {
	body := &CreateCharacterRequestBody{
		Name:        p.Name,
		Description: p.Description,
		Health:      p.Health,
		Experience:  p.Experience,
	}
	{
		var zero string
		if body.Description == zero {
			body.Description = ""
		}
	}
	{
		var zero uint32
		if body.Health == zero {
			body.Health = 100
		}
	}
	{
		var zero uint32
		if body.Experience == zero {
			body.Experience = 0
		}
	}
	return body
}

// NewUpdateCharacterRequestBody builds the HTTP request body from the payload
// of the "updateCharacter" endpoint of the "Front" service.
func NewUpdateCharacterRequestBody(p *front.Character) *UpdateCharacterRequestBody {
	body := &UpdateCharacterRequestBody{
		Description: p.Description,
		Health:      p.Health,
		Experience:  p.Experience,
	}
	{
		var zero string
		if body.Description == zero {
			body.Description = ""
		}
	}
	{
		var zero uint32
		if body.Health == zero {
			body.Health = 100
		}
	}
	{
		var zero uint32
		if body.Experience == zero {
			body.Experience = 0
		}
	}
	return body
}

// NewCreateItemRequestBody builds the HTTP request body from the payload of
// the "createItem" endpoint of the "Front" service.
func NewCreateItemRequestBody(p *front.Item) *CreateItemRequestBody {
	body := &CreateItemRequestBody{
		Name:        p.Name,
		Description: p.Description,
		Damage:      p.Damage,
		Healing:     p.Healing,
		Protection:  p.Protection,
	}
	{
		var zero uint32
		if body.Damage == zero {
			body.Damage = 0
		}
	}
	{
		var zero uint32
		if body.Healing == zero {
			body.Healing = 0
		}
	}
	{
		var zero uint32
		if body.Protection == zero {
			body.Protection = 0
		}
	}
	return body
}

// NewUpdateItemRequestBody builds the HTTP request body from the payload of
// the "updateItem" endpoint of the "Front" service.
func NewUpdateItemRequestBody(p *front.Item) *UpdateItemRequestBody {
	body := &UpdateItemRequestBody{
		Description: p.Description,
		Damage:      p.Damage,
		Healing:     p.Healing,
		Protection:  p.Protection,
	}
	{
		var zero uint32
		if body.Damage == zero {
			body.Damage = 0
		}
	}
	{
		var zero uint32
		if body.Healing == zero {
			body.Healing = 0
		}
	}
	{
		var zero uint32
		if body.Protection == zero {
			body.Protection = 0
		}
	}
	return body
}

// NewAddInventoryItemRequestBody builds the HTTP request body from the payload
// of the "addInventoryItem" endpoint of the "Front" service.
func NewAddInventoryItemRequestBody(p *front.AddInventoryItemPayload) *AddInventoryItemRequestBody {
	body := &AddInventoryItemRequestBody{
		Count: p.Count,
	}
	return body
}

// NewRemoveInventoryItemRequestBody builds the HTTP request body from the
// payload of the "removeInventoryItem" endpoint of the "Front" service.
func NewRemoveInventoryItemRequestBody(p *front.RemoveInventoryItemPayload) *RemoveInventoryItemRequestBody {
	body := &RemoveInventoryItemRequestBody{
		Count: p.Count,
	}
	return body
}

// NewCreateCharacterCharacterCreated builds a "Front" service
// "createCharacter" endpoint result from a HTTP "Created" response.
func NewCreateCharacterCharacterCreated(body *CreateCharacterResponseBody) *front.Character {
	v := &front.Character{
		Name: *body.Name,
	}
	if body.Description != nil {
		v.Description = *body.Description
	}
	if body.Health != nil {
		v.Health = *body.Health
	}
	if body.Experience != nil {
		v.Experience = *body.Experience
	}
	if body.Description == nil {
		v.Description = ""
	}
	if body.Health == nil {
		v.Health = 100
	}
	if body.Experience == nil {
		v.Experience = 0
	}

	return v
}

// NewCreateCharacterCharacterAlreadyExists builds a Front service
// createCharacter endpoint CharacterAlreadyExists error.
func NewCreateCharacterCharacterAlreadyExists(body *CreateCharacterCharacterAlreadyExistsResponseBody) *front.CharacterAlreadyExists {
	v := &front.CharacterAlreadyExists{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewGetCharacterCharacterOK builds a "Front" service "getCharacter" endpoint
// result from a HTTP "OK" response.
func NewGetCharacterCharacterOK(body *GetCharacterResponseBody) *front.Character {
	v := &front.Character{
		Name: *body.Name,
	}
	if body.Description != nil {
		v.Description = *body.Description
	}
	if body.Health != nil {
		v.Health = *body.Health
	}
	if body.Experience != nil {
		v.Experience = *body.Experience
	}
	if body.Description == nil {
		v.Description = ""
	}
	if body.Health == nil {
		v.Health = 100
	}
	if body.Experience == nil {
		v.Experience = 0
	}

	return v
}

// NewGetCharacterCharacterNotFound builds a Front service getCharacter
// endpoint CharacterNotFound error.
func NewGetCharacterCharacterNotFound(body *GetCharacterCharacterNotFoundResponseBody) *front.CharacterNotFound {
	v := &front.CharacterNotFound{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewListCharactersCharacterOK builds a "Front" service "listCharacters"
// endpoint result from a HTTP "OK" response.
func NewListCharactersCharacterOK(body []*CharacterResponse) []*front.Character {
	v := make([]*front.Character, len(body))
	for i, val := range body {
		v[i] = unmarshalCharacterResponseToFrontCharacter(val)
	}

	return v
}

// NewUpdateCharacterCharacterOK builds a "Front" service "updateCharacter"
// endpoint result from a HTTP "OK" response.
func NewUpdateCharacterCharacterOK(body *UpdateCharacterResponseBody) *front.Character {
	v := &front.Character{
		Name: *body.Name,
	}
	if body.Description != nil {
		v.Description = *body.Description
	}
	if body.Health != nil {
		v.Health = *body.Health
	}
	if body.Experience != nil {
		v.Experience = *body.Experience
	}
	if body.Description == nil {
		v.Description = ""
	}
	if body.Health == nil {
		v.Health = 100
	}
	if body.Experience == nil {
		v.Experience = 0
	}

	return v
}

// NewUpdateCharacterCharacterNotFound builds a Front service updateCharacter
// endpoint CharacterNotFound error.
func NewUpdateCharacterCharacterNotFound(body *UpdateCharacterCharacterNotFoundResponseBody) *front.CharacterNotFound {
	v := &front.CharacterNotFound{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewCreateItemItemCreated builds a "Front" service "createItem" endpoint
// result from a HTTP "Created" response.
func NewCreateItemItemCreated(body *CreateItemResponseBody) *front.Item {
	v := &front.Item{
		Name:        *body.Name,
		Description: *body.Description,
	}
	if body.Damage != nil {
		v.Damage = *body.Damage
	}
	if body.Healing != nil {
		v.Healing = *body.Healing
	}
	if body.Protection != nil {
		v.Protection = *body.Protection
	}
	if body.Damage == nil {
		v.Damage = 0
	}
	if body.Healing == nil {
		v.Healing = 0
	}
	if body.Protection == nil {
		v.Protection = 0
	}

	return v
}

// NewCreateItemItemAlreadyExists builds a Front service createItem endpoint
// ItemAlreadyExists error.
func NewCreateItemItemAlreadyExists(body *CreateItemItemAlreadyExistsResponseBody) *front.ItemAlreadyExists {
	v := &front.ItemAlreadyExists{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewGetItemItemOK builds a "Front" service "getItem" endpoint result from a
// HTTP "OK" response.
func NewGetItemItemOK(body *GetItemResponseBody) *front.Item {
	v := &front.Item{
		Name:        *body.Name,
		Description: *body.Description,
	}
	if body.Damage != nil {
		v.Damage = *body.Damage
	}
	if body.Healing != nil {
		v.Healing = *body.Healing
	}
	if body.Protection != nil {
		v.Protection = *body.Protection
	}
	if body.Damage == nil {
		v.Damage = 0
	}
	if body.Healing == nil {
		v.Healing = 0
	}
	if body.Protection == nil {
		v.Protection = 0
	}

	return v
}

// NewGetItemItemNotFound builds a Front service getItem endpoint ItemNotFound
// error.
func NewGetItemItemNotFound(body *GetItemItemNotFoundResponseBody) *front.ItemNotFound {
	v := &front.ItemNotFound{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewListItemsItemOK builds a "Front" service "listItems" endpoint result from
// a HTTP "OK" response.
func NewListItemsItemOK(body []*ItemResponse) []*front.Item {
	v := make([]*front.Item, len(body))
	for i, val := range body {
		v[i] = unmarshalItemResponseToFrontItem(val)
	}

	return v
}

// NewUpdateItemItemOK builds a "Front" service "updateItem" endpoint result
// from a HTTP "OK" response.
func NewUpdateItemItemOK(body *UpdateItemResponseBody) *front.Item {
	v := &front.Item{
		Name:        *body.Name,
		Description: *body.Description,
	}
	if body.Damage != nil {
		v.Damage = *body.Damage
	}
	if body.Healing != nil {
		v.Healing = *body.Healing
	}
	if body.Protection != nil {
		v.Protection = *body.Protection
	}
	if body.Damage == nil {
		v.Damage = 0
	}
	if body.Healing == nil {
		v.Healing = 0
	}
	if body.Protection == nil {
		v.Protection = 0
	}

	return v
}

// NewUpdateItemItemNotFound builds a Front service updateItem endpoint
// ItemNotFound error.
func NewUpdateItemItemNotFound(body *UpdateItemItemNotFoundResponseBody) *front.ItemNotFound {
	v := &front.ItemNotFound{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewAddInventoryItemCharacterNotFound builds a Front service addInventoryItem
// endpoint CharacterNotFound error.
func NewAddInventoryItemCharacterNotFound(body *AddInventoryItemCharacterNotFoundResponseBody) *front.CharacterNotFound {
	v := &front.CharacterNotFound{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewAddInventoryItemItemNotFound builds a Front service addInventoryItem
// endpoint ItemNotFound error.
func NewAddInventoryItemItemNotFound(body *AddInventoryItemItemNotFoundResponseBody) *front.ItemNotFound {
	v := &front.ItemNotFound{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewAddInventoryItemItemCountNotValid builds a Front service addInventoryItem
// endpoint ItemCountNotValid error.
func NewAddInventoryItemItemCountNotValid(body *AddInventoryItemItemCountNotValidResponseBody) *front.ItemCountNotValid {
	v := &front.ItemCountNotValid{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewRemoveInventoryItemCharacterNotFound builds a Front service
// removeInventoryItem endpoint CharacterNotFound error.
func NewRemoveInventoryItemCharacterNotFound(body *RemoveInventoryItemCharacterNotFoundResponseBody) *front.CharacterNotFound {
	v := &front.CharacterNotFound{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewRemoveInventoryItemItemCountNotValid builds a Front service
// removeInventoryItem endpoint ItemCountNotValid error.
func NewRemoveInventoryItemItemCountNotValid(body *RemoveInventoryItemItemCountNotValidResponseBody) *front.ItemCountNotValid {
	v := &front.ItemCountNotValid{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewGetInventoryInventoryEntryOK builds a "Front" service "getInventory"
// endpoint result from a HTTP "OK" response.
func NewGetInventoryInventoryEntryOK(body []*InventoryEntryResponse) []*front.InventoryEntry {
	v := make([]*front.InventoryEntry, len(body))
	for i, val := range body {
		v[i] = unmarshalInventoryEntryResponseToFrontInventoryEntry(val)
	}

	return v
}

// NewGetInventoryCharacterNotFound builds a Front service getInventory
// endpoint CharacterNotFound error.
func NewGetInventoryCharacterNotFound(body *GetInventoryCharacterNotFoundResponseBody) *front.CharacterNotFound {
	v := &front.CharacterNotFound{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// ValidateCreateCharacterResponseBody runs the validations defined on
// CreateCharacterResponseBody
func ValidateCreateCharacterResponseBody(body *CreateCharacterResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 32, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 128, false))
		}
	}
	if body.Health != nil {
		if *body.Health < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 0, true))
		}
	}
	if body.Health != nil {
		if *body.Health > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 1e+07, false))
		}
	}
	if body.Experience != nil {
		if *body.Experience < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 0, true))
		}
	}
	if body.Experience != nil {
		if *body.Experience > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 1e+07, false))
		}
	}
	return
}

// ValidateGetCharacterResponseBody runs the validations defined on
// GetCharacterResponseBody
func ValidateGetCharacterResponseBody(body *GetCharacterResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 32, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 128, false))
		}
	}
	if body.Health != nil {
		if *body.Health < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 0, true))
		}
	}
	if body.Health != nil {
		if *body.Health > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 1e+07, false))
		}
	}
	if body.Experience != nil {
		if *body.Experience < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 0, true))
		}
	}
	if body.Experience != nil {
		if *body.Experience > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 1e+07, false))
		}
	}
	return
}

// ValidateUpdateCharacterResponseBody runs the validations defined on
// UpdateCharacterResponseBody
func ValidateUpdateCharacterResponseBody(body *UpdateCharacterResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 32, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 128, false))
		}
	}
	if body.Health != nil {
		if *body.Health < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 0, true))
		}
	}
	if body.Health != nil {
		if *body.Health > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 1e+07, false))
		}
	}
	if body.Experience != nil {
		if *body.Experience < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 0, true))
		}
	}
	if body.Experience != nil {
		if *body.Experience > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 1e+07, false))
		}
	}
	return
}

// ValidateCreateItemResponseBody runs the validations defined on
// CreateItemResponseBody
func ValidateCreateItemResponseBody(body *CreateItemResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 32, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 128, false))
		}
	}
	if body.Damage != nil {
		if *body.Damage < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 0, true))
		}
	}
	if body.Damage != nil {
		if *body.Damage > 1e+06 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 1e+06, false))
		}
	}
	if body.Healing != nil {
		if *body.Healing < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 0, true))
		}
	}
	if body.Healing != nil {
		if *body.Healing > 1e+06 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 1e+06, false))
		}
	}
	if body.Protection != nil {
		if *body.Protection < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 0, true))
		}
	}
	if body.Protection != nil {
		if *body.Protection > 10000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 10000, false))
		}
	}
	return
}

// ValidateGetItemResponseBody runs the validations defined on
// GetItemResponseBody
func ValidateGetItemResponseBody(body *GetItemResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 32, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 128, false))
		}
	}
	if body.Damage != nil {
		if *body.Damage < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 0, true))
		}
	}
	if body.Damage != nil {
		if *body.Damage > 1e+06 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 1e+06, false))
		}
	}
	if body.Healing != nil {
		if *body.Healing < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 0, true))
		}
	}
	if body.Healing != nil {
		if *body.Healing > 1e+06 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 1e+06, false))
		}
	}
	if body.Protection != nil {
		if *body.Protection < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 0, true))
		}
	}
	if body.Protection != nil {
		if *body.Protection > 10000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 10000, false))
		}
	}
	return
}

// ValidateUpdateItemResponseBody runs the validations defined on
// UpdateItemResponseBody
func ValidateUpdateItemResponseBody(body *UpdateItemResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 32, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 128, false))
		}
	}
	if body.Damage != nil {
		if *body.Damage < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 0, true))
		}
	}
	if body.Damage != nil {
		if *body.Damage > 1e+06 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 1e+06, false))
		}
	}
	if body.Healing != nil {
		if *body.Healing < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 0, true))
		}
	}
	if body.Healing != nil {
		if *body.Healing > 1e+06 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 1e+06, false))
		}
	}
	if body.Protection != nil {
		if *body.Protection < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 0, true))
		}
	}
	if body.Protection != nil {
		if *body.Protection > 10000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 10000, false))
		}
	}
	return
}

// ValidateCreateCharacterCharacterAlreadyExistsResponseBody runs the
// validations defined on createCharacter_CharacterAlreadyExists_response_body
func ValidateCreateCharacterCharacterAlreadyExistsResponseBody(body *CreateCharacterCharacterAlreadyExistsResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateGetCharacterCharacterNotFoundResponseBody runs the validations
// defined on getCharacter_CharacterNotFound_response_body
func ValidateGetCharacterCharacterNotFoundResponseBody(body *GetCharacterCharacterNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateUpdateCharacterCharacterNotFoundResponseBody runs the validations
// defined on updateCharacter_CharacterNotFound_response_body
func ValidateUpdateCharacterCharacterNotFoundResponseBody(body *UpdateCharacterCharacterNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateCreateItemItemAlreadyExistsResponseBody runs the validations defined
// on createItem_ItemAlreadyExists_response_body
func ValidateCreateItemItemAlreadyExistsResponseBody(body *CreateItemItemAlreadyExistsResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateGetItemItemNotFoundResponseBody runs the validations defined on
// getItem_ItemNotFound_response_body
func ValidateGetItemItemNotFoundResponseBody(body *GetItemItemNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateUpdateItemItemNotFoundResponseBody runs the validations defined on
// updateItem_ItemNotFound_response_body
func ValidateUpdateItemItemNotFoundResponseBody(body *UpdateItemItemNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateAddInventoryItemCharacterNotFoundResponseBody runs the validations
// defined on addInventoryItem_CharacterNotFound_response_body
func ValidateAddInventoryItemCharacterNotFoundResponseBody(body *AddInventoryItemCharacterNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateAddInventoryItemItemNotFoundResponseBody runs the validations
// defined on addInventoryItem_ItemNotFound_response_body
func ValidateAddInventoryItemItemNotFoundResponseBody(body *AddInventoryItemItemNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateAddInventoryItemItemCountNotValidResponseBody runs the validations
// defined on addInventoryItem_ItemCountNotValid_response_body
func ValidateAddInventoryItemItemCountNotValidResponseBody(body *AddInventoryItemItemCountNotValidResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateRemoveInventoryItemCharacterNotFoundResponseBody runs the
// validations defined on removeInventoryItem_CharacterNotFound_response_body
func ValidateRemoveInventoryItemCharacterNotFoundResponseBody(body *RemoveInventoryItemCharacterNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateRemoveInventoryItemItemCountNotValidResponseBody runs the
// validations defined on removeInventoryItem_ItemCountNotValid_response_body
func ValidateRemoveInventoryItemItemCountNotValidResponseBody(body *RemoveInventoryItemItemCountNotValidResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateGetInventoryCharacterNotFoundResponseBody runs the validations
// defined on getInventory_CharacterNotFound_response_body
func ValidateGetInventoryCharacterNotFoundResponseBody(body *GetInventoryCharacterNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateCharacterResponse runs the validations defined on CharacterResponse
func ValidateCharacterResponse(body *CharacterResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 32, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 128, false))
		}
	}
	if body.Health != nil {
		if *body.Health < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 0, true))
		}
	}
	if body.Health != nil {
		if *body.Health > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 1e+07, false))
		}
	}
	if body.Experience != nil {
		if *body.Experience < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 0, true))
		}
	}
	if body.Experience != nil {
		if *body.Experience > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 1e+07, false))
		}
	}
	return
}

// ValidateItemResponse runs the validations defined on ItemResponse
func ValidateItemResponse(body *ItemResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 32, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 128, false))
		}
	}
	if body.Damage != nil {
		if *body.Damage < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 0, true))
		}
	}
	if body.Damage != nil {
		if *body.Damage > 1e+06 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 1e+06, false))
		}
	}
	if body.Healing != nil {
		if *body.Healing < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 0, true))
		}
	}
	if body.Healing != nil {
		if *body.Healing > 1e+06 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 1e+06, false))
		}
	}
	if body.Protection != nil {
		if *body.Protection < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 0, true))
		}
	}
	if body.Protection != nil {
		if *body.Protection > 10000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 10000, false))
		}
	}
	return
}

// ValidateInventoryEntryResponse runs the validations defined on
// InventoryEntryResponse
func ValidateInventoryEntryResponse(body *InventoryEntryResponse) (err error) {
	if body.Item == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("item", "body"))
	}
	if body.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count", "body"))
	}
	return
}
