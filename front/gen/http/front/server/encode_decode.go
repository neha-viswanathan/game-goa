// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Front HTTP server encoders and decoders
//
// Command:
// $ goa gen front/design

package server

import (
	"context"
	"errors"
	front "front/gen/front"
	"io"
	"net/http"
	"unicode/utf8"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateCharacterResponse returns an encoder for responses returned by
// the Front createCharacter endpoint.
func EncodeCreateCharacterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*front.Character)
		enc := encoder(ctx, w)
		body := NewCreateCharacterResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateCharacterRequest returns a decoder for requests sent to the
// Front createCharacter endpoint.
func DecodeCreateCharacterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateCharacterRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCharacterRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateCharacterCharacter(&body)

		return payload, nil
	}
}

// EncodeCreateCharacterError returns an encoder for errors returned by the
// createCharacter Front endpoint.
func EncodeCreateCharacterError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "CharacterAlreadyExists":
			var res *front.CharacterAlreadyExists
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateCharacterCharacterAlreadyExistsResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetCharacterResponse returns an encoder for responses returned by the
// Front getCharacter endpoint.
func EncodeGetCharacterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*front.Character)
		enc := encoder(ctx, w)
		body := NewGetCharacterResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetCharacterRequest returns a decoder for requests sent to the Front
// getCharacter endpoint.
func DecodeGetCharacterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			name string

			params = mux.Vars(r)
		)
		name = params["name"]
		payload := NewGetCharacterPayload(name)

		return payload, nil
	}
}

// EncodeGetCharacterError returns an encoder for errors returned by the
// getCharacter Front endpoint.
func EncodeGetCharacterError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "CharacterNotFound":
			var res *front.CharacterNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetCharacterCharacterNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListCharactersResponse returns an encoder for responses returned by
// the Front listCharacters endpoint.
func EncodeListCharactersResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.([]*front.Character)
		enc := encoder(ctx, w)
		body := NewListCharactersResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeUpdateCharacterResponse returns an encoder for responses returned by
// the Front updateCharacter endpoint.
func EncodeUpdateCharacterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*front.Character)
		enc := encoder(ctx, w)
		body := NewUpdateCharacterResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateCharacterRequest returns a decoder for requests sent to the
// Front updateCharacter endpoint.
func DecodeUpdateCharacterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateCharacterRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateCharacterRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			name string

			params = mux.Vars(r)
		)
		name = params["name"]
		if utf8.RuneCountInString(name) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("name", name, utf8.RuneCountInString(name), 32, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateCharacterCharacter(&body, name)

		return payload, nil
	}
}

// EncodeUpdateCharacterError returns an encoder for errors returned by the
// updateCharacter Front endpoint.
func EncodeUpdateCharacterError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "CharacterNotFound":
			var res *front.CharacterNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateCharacterCharacterNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteCharacterResponse returns an encoder for responses returned by
// the Front deleteCharacter endpoint.
func EncodeDeleteCharacterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteCharacterRequest returns a decoder for requests sent to the
// Front deleteCharacter endpoint.
func DecodeDeleteCharacterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			name string

			params = mux.Vars(r)
		)
		name = params["name"]
		payload := NewDeleteCharacterPayload(name)

		return payload, nil
	}
}

// EncodeCreateItemResponse returns an encoder for responses returned by the
// Front createItem endpoint.
func EncodeCreateItemResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*front.Item)
		enc := encoder(ctx, w)
		body := NewCreateItemResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateItemRequest returns a decoder for requests sent to the Front
// createItem endpoint.
func DecodeCreateItemRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateItemRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateItemRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateItemItem(&body)

		return payload, nil
	}
}

// EncodeCreateItemError returns an encoder for errors returned by the
// createItem Front endpoint.
func EncodeCreateItemError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "ItemAlreadyExists":
			var res *front.ItemAlreadyExists
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateItemItemAlreadyExistsResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetItemResponse returns an encoder for responses returned by the Front
// getItem endpoint.
func EncodeGetItemResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*front.Item)
		enc := encoder(ctx, w)
		body := NewGetItemResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetItemRequest returns a decoder for requests sent to the Front
// getItem endpoint.
func DecodeGetItemRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			name string

			params = mux.Vars(r)
		)
		name = params["name"]
		payload := NewGetItemPayload(name)

		return payload, nil
	}
}

// EncodeGetItemError returns an encoder for errors returned by the getItem
// Front endpoint.
func EncodeGetItemError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "ItemNotFound":
			var res *front.ItemNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetItemItemNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListItemsResponse returns an encoder for responses returned by the
// Front listItems endpoint.
func EncodeListItemsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.([]*front.Item)
		enc := encoder(ctx, w)
		body := NewListItemsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeUpdateItemResponse returns an encoder for responses returned by the
// Front updateItem endpoint.
func EncodeUpdateItemResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*front.Item)
		enc := encoder(ctx, w)
		body := NewUpdateItemResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateItemRequest returns a decoder for requests sent to the Front
// updateItem endpoint.
func DecodeUpdateItemRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateItemRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateItemRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			name string

			params = mux.Vars(r)
		)
		name = params["name"]
		if utf8.RuneCountInString(name) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("name", name, utf8.RuneCountInString(name), 32, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateItemItem(&body, name)

		return payload, nil
	}
}

// EncodeUpdateItemError returns an encoder for errors returned by the
// updateItem Front endpoint.
func EncodeUpdateItemError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "ItemNotFound":
			var res *front.ItemNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateItemItemNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteItemResponse returns an encoder for responses returned by the
// Front deleteItem endpoint.
func EncodeDeleteItemResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteItemRequest returns a decoder for requests sent to the Front
// deleteItem endpoint.
func DecodeDeleteItemRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			name string

			params = mux.Vars(r)
		)
		name = params["name"]
		payload := NewDeleteItemPayload(name)

		return payload, nil
	}
}

// EncodeAddInventoryItemResponse returns an encoder for responses returned by
// the Front addInventoryItem endpoint.
func EncodeAddInventoryItemResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeAddInventoryItemRequest returns a decoder for requests sent to the
// Front addInventoryItem endpoint.
func DecodeAddInventoryItemRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AddInventoryItemRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAddInventoryItemRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			character string
			item      string

			params = mux.Vars(r)
		)
		character = params["character"]
		item = params["item"]
		payload := NewAddInventoryItemPayload(&body, character, item)

		return payload, nil
	}
}

// EncodeAddInventoryItemError returns an encoder for errors returned by the
// addInventoryItem Front endpoint.
func EncodeAddInventoryItemError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "CharacterNotFound":
			var res *front.CharacterNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewAddInventoryItemCharacterNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ItemNotFound":
			var res *front.ItemNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewAddInventoryItemItemNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ItemCountNotValid":
			var res *front.ItemCountNotValid
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewAddInventoryItemItemCountNotValidResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeRemoveInventoryItemResponse returns an encoder for responses returned
// by the Front removeInventoryItem endpoint.
func EncodeRemoveInventoryItemResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeRemoveInventoryItemRequest returns a decoder for requests sent to the
// Front removeInventoryItem endpoint.
func DecodeRemoveInventoryItemRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RemoveInventoryItemRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateRemoveInventoryItemRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			character string
			item      string

			params = mux.Vars(r)
		)
		character = params["character"]
		item = params["item"]
		payload := NewRemoveInventoryItemPayload(&body, character, item)

		return payload, nil
	}
}

// EncodeRemoveInventoryItemError returns an encoder for errors returned by the
// removeInventoryItem Front endpoint.
func EncodeRemoveInventoryItemError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "CharacterNotFound":
			var res *front.CharacterNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRemoveInventoryItemCharacterNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ItemCountNotValid":
			var res *front.ItemCountNotValid
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRemoveInventoryItemItemCountNotValidResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetInventoryResponse returns an encoder for responses returned by the
// Front getInventory endpoint.
func EncodeGetInventoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.([]*front.InventoryEntry)
		enc := encoder(ctx, w)
		body := NewGetInventoryResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetInventoryRequest returns a decoder for requests sent to the Front
// getInventory endpoint.
func DecodeGetInventoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			character string

			params = mux.Vars(r)
		)
		character = params["character"]
		payload := NewGetInventoryPayload(character)

		return payload, nil
	}
}

// EncodeGetInventoryError returns an encoder for errors returned by the
// getInventory Front endpoint.
func EncodeGetInventoryError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "CharacterNotFound":
			var res *front.CharacterNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetInventoryCharacterNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalFrontCharacterToCharacterResponse builds a value of type
// *CharacterResponse from a value of type *front.Character.
func marshalFrontCharacterToCharacterResponse(v *front.Character) *CharacterResponse {
	res := &CharacterResponse{
		Name:        v.Name,
		Description: v.Description,
		Health:      v.Health,
		Experience:  v.Experience,
	}
	{
		var zero string
		if res.Description == zero {
			res.Description = ""
		}
	}
	{
		var zero uint32
		if res.Health == zero {
			res.Health = 100
		}
	}
	{
		var zero uint32
		if res.Experience == zero {
			res.Experience = 0
		}
	}

	return res
}

// marshalFrontItemToItemResponse builds a value of type *ItemResponse from a
// value of type *front.Item.
func marshalFrontItemToItemResponse(v *front.Item) *ItemResponse {
	res := &ItemResponse{
		Name:        v.Name,
		Description: v.Description,
		Damage:      v.Damage,
		Healing:     v.Healing,
		Protection:  v.Protection,
	}
	{
		var zero uint32
		if res.Damage == zero {
			res.Damage = 0
		}
	}
	{
		var zero uint32
		if res.Healing == zero {
			res.Healing = 0
		}
	}
	{
		var zero uint32
		if res.Protection == zero {
			res.Protection = 0
		}
	}

	return res
}

// marshalFrontInventoryEntryToInventoryEntryResponse builds a value of type
// *InventoryEntryResponse from a value of type *front.InventoryEntry.
func marshalFrontInventoryEntryToInventoryEntryResponse(v *front.InventoryEntry) *InventoryEntryResponse {
	res := &InventoryEntryResponse{
		Item:  v.Item,
		Count: v.Count,
	}

	return res
}
