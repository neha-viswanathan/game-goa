// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Front HTTP server
//
// Command:
// $ goa gen front/design

package server

import (
	"context"
	front "front/gen/front"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the Front service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	CreateCharacter     http.Handler
	GetCharacter        http.Handler
	ListCharacters      http.Handler
	UpdateCharacter     http.Handler
	DeleteCharacter     http.Handler
	CreateItem          http.Handler
	GetItem             http.Handler
	ListItems           http.Handler
	UpdateItem          http.Handler
	DeleteItem          http.Handler
	AddInventoryItem    http.Handler
	RemoveInventoryItem http.Handler
	GetInventory        http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the Front service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *front.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreateCharacter", "POST", "/api/character"},
			{"GetCharacter", "GET", "/api/character/{name}"},
			{"ListCharacters", "GET", "/api/character"},
			{"UpdateCharacter", "PUT", "/api/character/{name}"},
			{"DeleteCharacter", "DELETE", "/api/character/{name}"},
			{"CreateItem", "POST", "/api/item"},
			{"GetItem", "GET", "/api/item/{name}"},
			{"ListItems", "GET", "/api/item"},
			{"UpdateItem", "PUT", "/api/item/{name}"},
			{"DeleteItem", "DELETE", "/api/item/{name}"},
			{"AddInventoryItem", "POST", "/api/inventory/{character}/{item}"},
			{"RemoveInventoryItem", "DELETE", "/api/inventory/{character}/{item}"},
			{"GetInventory", "GET", "/api/inventory/{character}"},
		},
		CreateCharacter:     NewCreateCharacterHandler(e.CreateCharacter, mux, decoder, encoder, errhandler, formatter),
		GetCharacter:        NewGetCharacterHandler(e.GetCharacter, mux, decoder, encoder, errhandler, formatter),
		ListCharacters:      NewListCharactersHandler(e.ListCharacters, mux, decoder, encoder, errhandler, formatter),
		UpdateCharacter:     NewUpdateCharacterHandler(e.UpdateCharacter, mux, decoder, encoder, errhandler, formatter),
		DeleteCharacter:     NewDeleteCharacterHandler(e.DeleteCharacter, mux, decoder, encoder, errhandler, formatter),
		CreateItem:          NewCreateItemHandler(e.CreateItem, mux, decoder, encoder, errhandler, formatter),
		GetItem:             NewGetItemHandler(e.GetItem, mux, decoder, encoder, errhandler, formatter),
		ListItems:           NewListItemsHandler(e.ListItems, mux, decoder, encoder, errhandler, formatter),
		UpdateItem:          NewUpdateItemHandler(e.UpdateItem, mux, decoder, encoder, errhandler, formatter),
		DeleteItem:          NewDeleteItemHandler(e.DeleteItem, mux, decoder, encoder, errhandler, formatter),
		AddInventoryItem:    NewAddInventoryItemHandler(e.AddInventoryItem, mux, decoder, encoder, errhandler, formatter),
		RemoveInventoryItem: NewRemoveInventoryItemHandler(e.RemoveInventoryItem, mux, decoder, encoder, errhandler, formatter),
		GetInventory:        NewGetInventoryHandler(e.GetInventory, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "Front" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateCharacter = m(s.CreateCharacter)
	s.GetCharacter = m(s.GetCharacter)
	s.ListCharacters = m(s.ListCharacters)
	s.UpdateCharacter = m(s.UpdateCharacter)
	s.DeleteCharacter = m(s.DeleteCharacter)
	s.CreateItem = m(s.CreateItem)
	s.GetItem = m(s.GetItem)
	s.ListItems = m(s.ListItems)
	s.UpdateItem = m(s.UpdateItem)
	s.DeleteItem = m(s.DeleteItem)
	s.AddInventoryItem = m(s.AddInventoryItem)
	s.RemoveInventoryItem = m(s.RemoveInventoryItem)
	s.GetInventory = m(s.GetInventory)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return front.MethodNames[:] }

// Mount configures the mux to serve the Front endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateCharacterHandler(mux, h.CreateCharacter)
	MountGetCharacterHandler(mux, h.GetCharacter)
	MountListCharactersHandler(mux, h.ListCharacters)
	MountUpdateCharacterHandler(mux, h.UpdateCharacter)
	MountDeleteCharacterHandler(mux, h.DeleteCharacter)
	MountCreateItemHandler(mux, h.CreateItem)
	MountGetItemHandler(mux, h.GetItem)
	MountListItemsHandler(mux, h.ListItems)
	MountUpdateItemHandler(mux, h.UpdateItem)
	MountDeleteItemHandler(mux, h.DeleteItem)
	MountAddInventoryItemHandler(mux, h.AddInventoryItem)
	MountRemoveInventoryItemHandler(mux, h.RemoveInventoryItem)
	MountGetInventoryHandler(mux, h.GetInventory)
}

// Mount configures the mux to serve the Front endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateCharacterHandler configures the mux to serve the "Front" service
// "createCharacter" endpoint.
func MountCreateCharacterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/character", f)
}

// NewCreateCharacterHandler creates a HTTP handler which loads the HTTP
// request and calls the "Front" service "createCharacter" endpoint.
func NewCreateCharacterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateCharacterRequest(mux, decoder)
		encodeResponse = EncodeCreateCharacterResponse(encoder)
		encodeError    = EncodeCreateCharacterError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createCharacter")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Front")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetCharacterHandler configures the mux to serve the "Front" service
// "getCharacter" endpoint.
func MountGetCharacterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/character/{name}", f)
}

// NewGetCharacterHandler creates a HTTP handler which loads the HTTP request
// and calls the "Front" service "getCharacter" endpoint.
func NewGetCharacterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetCharacterRequest(mux, decoder)
		encodeResponse = EncodeGetCharacterResponse(encoder)
		encodeError    = EncodeGetCharacterError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getCharacter")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Front")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListCharactersHandler configures the mux to serve the "Front" service
// "listCharacters" endpoint.
func MountListCharactersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/character", f)
}

// NewListCharactersHandler creates a HTTP handler which loads the HTTP request
// and calls the "Front" service "listCharacters" endpoint.
func NewListCharactersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeListCharactersResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listCharacters")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Front")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateCharacterHandler configures the mux to serve the "Front" service
// "updateCharacter" endpoint.
func MountUpdateCharacterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/character/{name}", f)
}

// NewUpdateCharacterHandler creates a HTTP handler which loads the HTTP
// request and calls the "Front" service "updateCharacter" endpoint.
func NewUpdateCharacterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateCharacterRequest(mux, decoder)
		encodeResponse = EncodeUpdateCharacterResponse(encoder)
		encodeError    = EncodeUpdateCharacterError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateCharacter")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Front")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteCharacterHandler configures the mux to serve the "Front" service
// "deleteCharacter" endpoint.
func MountDeleteCharacterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/character/{name}", f)
}

// NewDeleteCharacterHandler creates a HTTP handler which loads the HTTP
// request and calls the "Front" service "deleteCharacter" endpoint.
func NewDeleteCharacterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteCharacterRequest(mux, decoder)
		encodeResponse = EncodeDeleteCharacterResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteCharacter")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Front")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateItemHandler configures the mux to serve the "Front" service
// "createItem" endpoint.
func MountCreateItemHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/item", f)
}

// NewCreateItemHandler creates a HTTP handler which loads the HTTP request and
// calls the "Front" service "createItem" endpoint.
func NewCreateItemHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateItemRequest(mux, decoder)
		encodeResponse = EncodeCreateItemResponse(encoder)
		encodeError    = EncodeCreateItemError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createItem")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Front")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetItemHandler configures the mux to serve the "Front" service
// "getItem" endpoint.
func MountGetItemHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/item/{name}", f)
}

// NewGetItemHandler creates a HTTP handler which loads the HTTP request and
// calls the "Front" service "getItem" endpoint.
func NewGetItemHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetItemRequest(mux, decoder)
		encodeResponse = EncodeGetItemResponse(encoder)
		encodeError    = EncodeGetItemError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getItem")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Front")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListItemsHandler configures the mux to serve the "Front" service
// "listItems" endpoint.
func MountListItemsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/item", f)
}

// NewListItemsHandler creates a HTTP handler which loads the HTTP request and
// calls the "Front" service "listItems" endpoint.
func NewListItemsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeListItemsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listItems")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Front")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateItemHandler configures the mux to serve the "Front" service
// "updateItem" endpoint.
func MountUpdateItemHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/item/{name}", f)
}

// NewUpdateItemHandler creates a HTTP handler which loads the HTTP request and
// calls the "Front" service "updateItem" endpoint.
func NewUpdateItemHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateItemRequest(mux, decoder)
		encodeResponse = EncodeUpdateItemResponse(encoder)
		encodeError    = EncodeUpdateItemError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateItem")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Front")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteItemHandler configures the mux to serve the "Front" service
// "deleteItem" endpoint.
func MountDeleteItemHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/item/{name}", f)
}

// NewDeleteItemHandler creates a HTTP handler which loads the HTTP request and
// calls the "Front" service "deleteItem" endpoint.
func NewDeleteItemHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteItemRequest(mux, decoder)
		encodeResponse = EncodeDeleteItemResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteItem")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Front")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAddInventoryItemHandler configures the mux to serve the "Front" service
// "addInventoryItem" endpoint.
func MountAddInventoryItemHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/inventory/{character}/{item}", f)
}

// NewAddInventoryItemHandler creates a HTTP handler which loads the HTTP
// request and calls the "Front" service "addInventoryItem" endpoint.
func NewAddInventoryItemHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAddInventoryItemRequest(mux, decoder)
		encodeResponse = EncodeAddInventoryItemResponse(encoder)
		encodeError    = EncodeAddInventoryItemError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "addInventoryItem")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Front")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRemoveInventoryItemHandler configures the mux to serve the "Front"
// service "removeInventoryItem" endpoint.
func MountRemoveInventoryItemHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/inventory/{character}/{item}", f)
}

// NewRemoveInventoryItemHandler creates a HTTP handler which loads the HTTP
// request and calls the "Front" service "removeInventoryItem" endpoint.
func NewRemoveInventoryItemHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRemoveInventoryItemRequest(mux, decoder)
		encodeResponse = EncodeRemoveInventoryItemResponse(encoder)
		encodeError    = EncodeRemoveInventoryItemError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "removeInventoryItem")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Front")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetInventoryHandler configures the mux to serve the "Front" service
// "getInventory" endpoint.
func MountGetInventoryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/inventory/{character}", f)
}

// NewGetInventoryHandler creates a HTTP handler which loads the HTTP request
// and calls the "Front" service "getInventory" endpoint.
func NewGetInventoryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetInventoryRequest(mux, decoder)
		encodeResponse = EncodeGetInventoryResponse(encoder)
		encodeError    = EncodeGetInventoryError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getInventory")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Front")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
