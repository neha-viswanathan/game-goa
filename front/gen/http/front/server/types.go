// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Front HTTP server types
//
// Command:
// $ goa gen front/design

package server

import (
	front "front/gen/front"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateCharacterRequestBody is the type of the "Front" service
// "createCharacter" endpoint HTTP request body.
type CreateCharacterRequestBody struct {
	// Name, which is a unique identifier
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Current health
	Health *uint32 `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Amount of experience
	Experience *uint32 `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// UpdateCharacterRequestBody is the type of the "Front" service
// "updateCharacter" endpoint HTTP request body.
type UpdateCharacterRequestBody struct {
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Current health
	Health *uint32 `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Amount of experience
	Experience *uint32 `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// CreateItemRequestBody is the type of the "Front" service "createItem"
// endpoint HTTP request body.
type CreateItemRequestBody struct {
	// Name, which is a unique identifier
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage
	Damage *uint32 `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Amount of healing
	Healing *uint32 `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Amount of protection
	Protection *uint32 `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// UpdateItemRequestBody is the type of the "Front" service "updateItem"
// endpoint HTTP request body.
type UpdateItemRequestBody struct {
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Amount of damage
	Damage *uint32 `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Amount of healing
	Healing *uint32 `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Amount of protection
	Protection *uint32 `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// AddInventoryItemRequestBody is the type of the "Front" service
// "addInventoryItem" endpoint HTTP request body.
type AddInventoryItemRequestBody struct {
	// item's count
	Count *uint32 `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
}

// RemoveInventoryItemRequestBody is the type of the "Front" service
// "removeInventoryItem" endpoint HTTP request body.
type RemoveInventoryItemRequestBody struct {
	// item's count
	Count *uint32 `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
}

// CreateCharacterResponseBody is the type of the "Front" service
// "createCharacter" endpoint HTTP response body.
type CreateCharacterResponseBody struct {
	// Name, which is a unique identifier
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description string `form:"description" json:"description" xml:"description"`
	// Current health
	Health uint32 `form:"health" json:"health" xml:"health"`
	// Amount of experience
	Experience uint32 `form:"experience" json:"experience" xml:"experience"`
}

// GetCharacterResponseBody is the type of the "Front" service "getCharacter"
// endpoint HTTP response body.
type GetCharacterResponseBody struct {
	// Name, which is a unique identifier
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description string `form:"description" json:"description" xml:"description"`
	// Current health
	Health uint32 `form:"health" json:"health" xml:"health"`
	// Amount of experience
	Experience uint32 `form:"experience" json:"experience" xml:"experience"`
}

// ListCharactersResponseBody is the type of the "Front" service
// "listCharacters" endpoint HTTP response body.
type ListCharactersResponseBody []*CharacterResponse

// UpdateCharacterResponseBody is the type of the "Front" service
// "updateCharacter" endpoint HTTP response body.
type UpdateCharacterResponseBody struct {
	// Name, which is a unique identifier
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description string `form:"description" json:"description" xml:"description"`
	// Current health
	Health uint32 `form:"health" json:"health" xml:"health"`
	// Amount of experience
	Experience uint32 `form:"experience" json:"experience" xml:"experience"`
}

// CreateItemResponseBody is the type of the "Front" service "createItem"
// endpoint HTTP response body.
type CreateItemResponseBody struct {
	// Name, which is a unique identifier
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description string `form:"description" json:"description" xml:"description"`
	// Amount of damage
	Damage uint32 `form:"damage" json:"damage" xml:"damage"`
	// Amount of healing
	Healing uint32 `form:"healing" json:"healing" xml:"healing"`
	// Amount of protection
	Protection uint32 `form:"protection" json:"protection" xml:"protection"`
}

// GetItemResponseBody is the type of the "Front" service "getItem" endpoint
// HTTP response body.
type GetItemResponseBody struct {
	// Name, which is a unique identifier
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description string `form:"description" json:"description" xml:"description"`
	// Amount of damage
	Damage uint32 `form:"damage" json:"damage" xml:"damage"`
	// Amount of healing
	Healing uint32 `form:"healing" json:"healing" xml:"healing"`
	// Amount of protection
	Protection uint32 `form:"protection" json:"protection" xml:"protection"`
}

// ListItemsResponseBody is the type of the "Front" service "listItems"
// endpoint HTTP response body.
type ListItemsResponseBody []*ItemResponse

// UpdateItemResponseBody is the type of the "Front" service "updateItem"
// endpoint HTTP response body.
type UpdateItemResponseBody struct {
	// Name, which is a unique identifier
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description string `form:"description" json:"description" xml:"description"`
	// Amount of damage
	Damage uint32 `form:"damage" json:"damage" xml:"damage"`
	// Amount of healing
	Healing uint32 `form:"healing" json:"healing" xml:"healing"`
	// Amount of protection
	Protection uint32 `form:"protection" json:"protection" xml:"protection"`
}

// GetInventoryResponseBody is the type of the "Front" service "getInventory"
// endpoint HTTP response body.
type GetInventoryResponseBody []*InventoryEntryResponse

// CreateCharacterCharacterAlreadyExistsResponseBody is the type of the "Front"
// service "createCharacter" endpoint HTTP response body for the
// "CharacterAlreadyExists" error.
type CreateCharacterCharacterAlreadyExistsResponseBody struct {
	// character already exists
	Message string `form:"message" json:"message" xml:"message"`
	// character name
	Name string `form:"name" json:"name" xml:"name"`
}

// GetCharacterCharacterNotFoundResponseBody is the type of the "Front" service
// "getCharacter" endpoint HTTP response body for the "CharacterNotFound" error.
type GetCharacterCharacterNotFoundResponseBody struct {
	// character not found
	Message string `form:"message" json:"message" xml:"message"`
	// character name
	Name string `form:"name" json:"name" xml:"name"`
}

// UpdateCharacterCharacterNotFoundResponseBody is the type of the "Front"
// service "updateCharacter" endpoint HTTP response body for the
// "CharacterNotFound" error.
type UpdateCharacterCharacterNotFoundResponseBody struct {
	// character not found
	Message string `form:"message" json:"message" xml:"message"`
	// character name
	Name string `form:"name" json:"name" xml:"name"`
}

// CreateItemItemAlreadyExistsResponseBody is the type of the "Front" service
// "createItem" endpoint HTTP response body for the "ItemAlreadyExists" error.
type CreateItemItemAlreadyExistsResponseBody struct {
	// item already exists
	Message string `form:"message" json:"message" xml:"message"`
	// item name
	Name string `form:"name" json:"name" xml:"name"`
}

// GetItemItemNotFoundResponseBody is the type of the "Front" service "getItem"
// endpoint HTTP response body for the "ItemNotFound" error.
type GetItemItemNotFoundResponseBody struct {
	// item not found
	Message string `form:"message" json:"message" xml:"message"`
	// item name
	Name string `form:"name" json:"name" xml:"name"`
}

// UpdateItemItemNotFoundResponseBody is the type of the "Front" service
// "updateItem" endpoint HTTP response body for the "ItemNotFound" error.
type UpdateItemItemNotFoundResponseBody struct {
	// item not found
	Message string `form:"message" json:"message" xml:"message"`
	// item name
	Name string `form:"name" json:"name" xml:"name"`
}

// AddInventoryItemCharacterNotFoundResponseBody is the type of the "Front"
// service "addInventoryItem" endpoint HTTP response body for the
// "CharacterNotFound" error.
type AddInventoryItemCharacterNotFoundResponseBody struct {
	// character not found
	Message string `form:"message" json:"message" xml:"message"`
	// character name
	Name string `form:"name" json:"name" xml:"name"`
}

// AddInventoryItemItemNotFoundResponseBody is the type of the "Front" service
// "addInventoryItem" endpoint HTTP response body for the "ItemNotFound" error.
type AddInventoryItemItemNotFoundResponseBody struct {
	// item not found
	Message string `form:"message" json:"message" xml:"message"`
	// item name
	Name string `form:"name" json:"name" xml:"name"`
}

// AddInventoryItemItemCountNotValidResponseBody is the type of the "Front"
// service "addInventoryItem" endpoint HTTP response body for the
// "ItemCountNotValid" error.
type AddInventoryItemItemCountNotValidResponseBody struct {
	// item count not valid
	Message string `form:"message" json:"message" xml:"message"`
	// item name
	Name string `form:"name" json:"name" xml:"name"`
}

// RemoveInventoryItemCharacterNotFoundResponseBody is the type of the "Front"
// service "removeInventoryItem" endpoint HTTP response body for the
// "CharacterNotFound" error.
type RemoveInventoryItemCharacterNotFoundResponseBody struct {
	// character not found
	Message string `form:"message" json:"message" xml:"message"`
	// character name
	Name string `form:"name" json:"name" xml:"name"`
}

// RemoveInventoryItemItemCountNotValidResponseBody is the type of the "Front"
// service "removeInventoryItem" endpoint HTTP response body for the
// "ItemCountNotValid" error.
type RemoveInventoryItemItemCountNotValidResponseBody struct {
	// item count not valid
	Message string `form:"message" json:"message" xml:"message"`
	// item name
	Name string `form:"name" json:"name" xml:"name"`
}

// GetInventoryCharacterNotFoundResponseBody is the type of the "Front" service
// "getInventory" endpoint HTTP response body for the "CharacterNotFound" error.
type GetInventoryCharacterNotFoundResponseBody struct {
	// character not found
	Message string `form:"message" json:"message" xml:"message"`
	// character name
	Name string `form:"name" json:"name" xml:"name"`
}

// CharacterResponse is used to define fields on response body types.
type CharacterResponse struct {
	// Name, which is a unique identifier
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description string `form:"description" json:"description" xml:"description"`
	// Current health
	Health uint32 `form:"health" json:"health" xml:"health"`
	// Amount of experience
	Experience uint32 `form:"experience" json:"experience" xml:"experience"`
}

// ItemResponse is used to define fields on response body types.
type ItemResponse struct {
	// Name, which is a unique identifier
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description string `form:"description" json:"description" xml:"description"`
	// Amount of damage
	Damage uint32 `form:"damage" json:"damage" xml:"damage"`
	// Amount of healing
	Healing uint32 `form:"healing" json:"healing" xml:"healing"`
	// Amount of protection
	Protection uint32 `form:"protection" json:"protection" xml:"protection"`
}

// InventoryEntryResponse is used to define fields on response body types.
type InventoryEntryResponse struct {
	// item name
	Item string `form:"item" json:"item" xml:"item"`
	// item count
	Count uint32 `form:"count" json:"count" xml:"count"`
}

// NewCreateCharacterResponseBody builds the HTTP response body from the result
// of the "createCharacter" endpoint of the "Front" service.
func NewCreateCharacterResponseBody(res *front.Character) *CreateCharacterResponseBody {
	body := &CreateCharacterResponseBody{
		Name:        res.Name,
		Description: res.Description,
		Health:      res.Health,
		Experience:  res.Experience,
	}
	{
		var zero string
		if body.Description == zero {
			body.Description = ""
		}
	}
	{
		var zero uint32
		if body.Health == zero {
			body.Health = 100
		}
	}
	{
		var zero uint32
		if body.Experience == zero {
			body.Experience = 0
		}
	}
	return body
}

// NewGetCharacterResponseBody builds the HTTP response body from the result of
// the "getCharacter" endpoint of the "Front" service.
func NewGetCharacterResponseBody(res *front.Character) *GetCharacterResponseBody {
	body := &GetCharacterResponseBody{
		Name:        res.Name,
		Description: res.Description,
		Health:      res.Health,
		Experience:  res.Experience,
	}
	{
		var zero string
		if body.Description == zero {
			body.Description = ""
		}
	}
	{
		var zero uint32
		if body.Health == zero {
			body.Health = 100
		}
	}
	{
		var zero uint32
		if body.Experience == zero {
			body.Experience = 0
		}
	}
	return body
}

// NewListCharactersResponseBody builds the HTTP response body from the result
// of the "listCharacters" endpoint of the "Front" service.
func NewListCharactersResponseBody(res []*front.Character) ListCharactersResponseBody {
	body := make([]*CharacterResponse, len(res))
	for i, val := range res {
		body[i] = marshalFrontCharacterToCharacterResponse(val)
	}
	return body
}

// NewUpdateCharacterResponseBody builds the HTTP response body from the result
// of the "updateCharacter" endpoint of the "Front" service.
func NewUpdateCharacterResponseBody(res *front.Character) *UpdateCharacterResponseBody {
	body := &UpdateCharacterResponseBody{
		Name:        res.Name,
		Description: res.Description,
		Health:      res.Health,
		Experience:  res.Experience,
	}
	{
		var zero string
		if body.Description == zero {
			body.Description = ""
		}
	}
	{
		var zero uint32
		if body.Health == zero {
			body.Health = 100
		}
	}
	{
		var zero uint32
		if body.Experience == zero {
			body.Experience = 0
		}
	}
	return body
}

// NewCreateItemResponseBody builds the HTTP response body from the result of
// the "createItem" endpoint of the "Front" service.
func NewCreateItemResponseBody(res *front.Item) *CreateItemResponseBody {
	body := &CreateItemResponseBody{
		Name:        res.Name,
		Description: res.Description,
		Damage:      res.Damage,
		Healing:     res.Healing,
		Protection:  res.Protection,
	}
	{
		var zero uint32
		if body.Damage == zero {
			body.Damage = 0
		}
	}
	{
		var zero uint32
		if body.Healing == zero {
			body.Healing = 0
		}
	}
	{
		var zero uint32
		if body.Protection == zero {
			body.Protection = 0
		}
	}
	return body
}

// NewGetItemResponseBody builds the HTTP response body from the result of the
// "getItem" endpoint of the "Front" service.
func NewGetItemResponseBody(res *front.Item) *GetItemResponseBody {
	body := &GetItemResponseBody{
		Name:        res.Name,
		Description: res.Description,
		Damage:      res.Damage,
		Healing:     res.Healing,
		Protection:  res.Protection,
	}
	{
		var zero uint32
		if body.Damage == zero {
			body.Damage = 0
		}
	}
	{
		var zero uint32
		if body.Healing == zero {
			body.Healing = 0
		}
	}
	{
		var zero uint32
		if body.Protection == zero {
			body.Protection = 0
		}
	}
	return body
}

// NewListItemsResponseBody builds the HTTP response body from the result of
// the "listItems" endpoint of the "Front" service.
func NewListItemsResponseBody(res []*front.Item) ListItemsResponseBody {
	body := make([]*ItemResponse, len(res))
	for i, val := range res {
		body[i] = marshalFrontItemToItemResponse(val)
	}
	return body
}

// NewUpdateItemResponseBody builds the HTTP response body from the result of
// the "updateItem" endpoint of the "Front" service.
func NewUpdateItemResponseBody(res *front.Item) *UpdateItemResponseBody {
	body := &UpdateItemResponseBody{
		Name:        res.Name,
		Description: res.Description,
		Damage:      res.Damage,
		Healing:     res.Healing,
		Protection:  res.Protection,
	}
	{
		var zero uint32
		if body.Damage == zero {
			body.Damage = 0
		}
	}
	{
		var zero uint32
		if body.Healing == zero {
			body.Healing = 0
		}
	}
	{
		var zero uint32
		if body.Protection == zero {
			body.Protection = 0
		}
	}
	return body
}

// NewGetInventoryResponseBody builds the HTTP response body from the result of
// the "getInventory" endpoint of the "Front" service.
func NewGetInventoryResponseBody(res []*front.InventoryEntry) GetInventoryResponseBody {
	body := make([]*InventoryEntryResponse, len(res))
	for i, val := range res {
		body[i] = marshalFrontInventoryEntryToInventoryEntryResponse(val)
	}
	return body
}

// NewCreateCharacterCharacterAlreadyExistsResponseBody builds the HTTP
// response body from the result of the "createCharacter" endpoint of the
// "Front" service.
func NewCreateCharacterCharacterAlreadyExistsResponseBody(res *front.CharacterAlreadyExists) *CreateCharacterCharacterAlreadyExistsResponseBody {
	body := &CreateCharacterCharacterAlreadyExistsResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewGetCharacterCharacterNotFoundResponseBody builds the HTTP response body
// from the result of the "getCharacter" endpoint of the "Front" service.
func NewGetCharacterCharacterNotFoundResponseBody(res *front.CharacterNotFound) *GetCharacterCharacterNotFoundResponseBody {
	body := &GetCharacterCharacterNotFoundResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewUpdateCharacterCharacterNotFoundResponseBody builds the HTTP response
// body from the result of the "updateCharacter" endpoint of the "Front"
// service.
func NewUpdateCharacterCharacterNotFoundResponseBody(res *front.CharacterNotFound) *UpdateCharacterCharacterNotFoundResponseBody {
	body := &UpdateCharacterCharacterNotFoundResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewCreateItemItemAlreadyExistsResponseBody builds the HTTP response body
// from the result of the "createItem" endpoint of the "Front" service.
func NewCreateItemItemAlreadyExistsResponseBody(res *front.ItemAlreadyExists) *CreateItemItemAlreadyExistsResponseBody {
	body := &CreateItemItemAlreadyExistsResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewGetItemItemNotFoundResponseBody builds the HTTP response body from the
// result of the "getItem" endpoint of the "Front" service.
func NewGetItemItemNotFoundResponseBody(res *front.ItemNotFound) *GetItemItemNotFoundResponseBody {
	body := &GetItemItemNotFoundResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewUpdateItemItemNotFoundResponseBody builds the HTTP response body from the
// result of the "updateItem" endpoint of the "Front" service.
func NewUpdateItemItemNotFoundResponseBody(res *front.ItemNotFound) *UpdateItemItemNotFoundResponseBody {
	body := &UpdateItemItemNotFoundResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewAddInventoryItemCharacterNotFoundResponseBody builds the HTTP response
// body from the result of the "addInventoryItem" endpoint of the "Front"
// service.
func NewAddInventoryItemCharacterNotFoundResponseBody(res *front.CharacterNotFound) *AddInventoryItemCharacterNotFoundResponseBody {
	body := &AddInventoryItemCharacterNotFoundResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewAddInventoryItemItemNotFoundResponseBody builds the HTTP response body
// from the result of the "addInventoryItem" endpoint of the "Front" service.
func NewAddInventoryItemItemNotFoundResponseBody(res *front.ItemNotFound) *AddInventoryItemItemNotFoundResponseBody {
	body := &AddInventoryItemItemNotFoundResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewAddInventoryItemItemCountNotValidResponseBody builds the HTTP response
// body from the result of the "addInventoryItem" endpoint of the "Front"
// service.
func NewAddInventoryItemItemCountNotValidResponseBody(res *front.ItemCountNotValid) *AddInventoryItemItemCountNotValidResponseBody {
	body := &AddInventoryItemItemCountNotValidResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewRemoveInventoryItemCharacterNotFoundResponseBody builds the HTTP response
// body from the result of the "removeInventoryItem" endpoint of the "Front"
// service.
func NewRemoveInventoryItemCharacterNotFoundResponseBody(res *front.CharacterNotFound) *RemoveInventoryItemCharacterNotFoundResponseBody {
	body := &RemoveInventoryItemCharacterNotFoundResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewRemoveInventoryItemItemCountNotValidResponseBody builds the HTTP response
// body from the result of the "removeInventoryItem" endpoint of the "Front"
// service.
func NewRemoveInventoryItemItemCountNotValidResponseBody(res *front.ItemCountNotValid) *RemoveInventoryItemItemCountNotValidResponseBody {
	body := &RemoveInventoryItemItemCountNotValidResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewGetInventoryCharacterNotFoundResponseBody builds the HTTP response body
// from the result of the "getInventory" endpoint of the "Front" service.
func NewGetInventoryCharacterNotFoundResponseBody(res *front.CharacterNotFound) *GetInventoryCharacterNotFoundResponseBody {
	body := &GetInventoryCharacterNotFoundResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewCreateCharacterCharacter builds a Front service createCharacter endpoint
// payload.
func NewCreateCharacterCharacter(body *CreateCharacterRequestBody) *front.Character {
	v := &front.Character{
		Name: *body.Name,
	}
	if body.Description != nil {
		v.Description = *body.Description
	}
	if body.Health != nil {
		v.Health = *body.Health
	}
	if body.Experience != nil {
		v.Experience = *body.Experience
	}
	if body.Description == nil {
		v.Description = ""
	}
	if body.Health == nil {
		v.Health = 100
	}
	if body.Experience == nil {
		v.Experience = 0
	}

	return v
}

// NewGetCharacterPayload builds a Front service getCharacter endpoint payload.
func NewGetCharacterPayload(name string) *front.GetCharacterPayload {
	v := &front.GetCharacterPayload{}
	v.Name = name

	return v
}

// NewUpdateCharacterCharacter builds a Front service updateCharacter endpoint
// payload.
func NewUpdateCharacterCharacter(body *UpdateCharacterRequestBody, name string) *front.Character {
	v := &front.Character{}
	if body.Description != nil {
		v.Description = *body.Description
	}
	if body.Health != nil {
		v.Health = *body.Health
	}
	if body.Experience != nil {
		v.Experience = *body.Experience
	}
	if body.Description == nil {
		v.Description = ""
	}
	if body.Health == nil {
		v.Health = 100
	}
	if body.Experience == nil {
		v.Experience = 0
	}
	v.Name = name

	return v
}

// NewDeleteCharacterPayload builds a Front service deleteCharacter endpoint
// payload.
func NewDeleteCharacterPayload(name string) *front.DeleteCharacterPayload {
	v := &front.DeleteCharacterPayload{}
	v.Name = name

	return v
}

// NewCreateItemItem builds a Front service createItem endpoint payload.
func NewCreateItemItem(body *CreateItemRequestBody) *front.Item {
	v := &front.Item{
		Name:        *body.Name,
		Description: *body.Description,
	}
	if body.Damage != nil {
		v.Damage = *body.Damage
	}
	if body.Healing != nil {
		v.Healing = *body.Healing
	}
	if body.Protection != nil {
		v.Protection = *body.Protection
	}
	if body.Damage == nil {
		v.Damage = 0
	}
	if body.Healing == nil {
		v.Healing = 0
	}
	if body.Protection == nil {
		v.Protection = 0
	}

	return v
}

// NewGetItemPayload builds a Front service getItem endpoint payload.
func NewGetItemPayload(name string) *front.GetItemPayload {
	v := &front.GetItemPayload{}
	v.Name = name

	return v
}

// NewUpdateItemItem builds a Front service updateItem endpoint payload.
func NewUpdateItemItem(body *UpdateItemRequestBody, name string) *front.Item {
	v := &front.Item{
		Description: *body.Description,
	}
	if body.Damage != nil {
		v.Damage = *body.Damage
	}
	if body.Healing != nil {
		v.Healing = *body.Healing
	}
	if body.Protection != nil {
		v.Protection = *body.Protection
	}
	if body.Damage == nil {
		v.Damage = 0
	}
	if body.Healing == nil {
		v.Healing = 0
	}
	if body.Protection == nil {
		v.Protection = 0
	}
	v.Name = name

	return v
}

// NewDeleteItemPayload builds a Front service deleteItem endpoint payload.
func NewDeleteItemPayload(name string) *front.DeleteItemPayload {
	v := &front.DeleteItemPayload{}
	v.Name = name

	return v
}

// NewAddInventoryItemPayload builds a Front service addInventoryItem endpoint
// payload.
func NewAddInventoryItemPayload(body *AddInventoryItemRequestBody, character string, item string) *front.AddInventoryItemPayload {
	v := &front.AddInventoryItemPayload{
		Count: *body.Count,
	}
	v.Character = character
	v.Item = item

	return v
}

// NewRemoveInventoryItemPayload builds a Front service removeInventoryItem
// endpoint payload.
func NewRemoveInventoryItemPayload(body *RemoveInventoryItemRequestBody, character string, item string) *front.RemoveInventoryItemPayload {
	v := &front.RemoveInventoryItemPayload{
		Count: *body.Count,
	}
	v.Character = character
	v.Item = item

	return v
}

// NewGetInventoryPayload builds a Front service getInventory endpoint payload.
func NewGetInventoryPayload(character string) *front.GetInventoryPayload {
	v := &front.GetInventoryPayload{}
	v.Character = character

	return v
}

// ValidateCreateCharacterRequestBody runs the validations defined on
// CreateCharacterRequestBody
func ValidateCreateCharacterRequestBody(body *CreateCharacterRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 32, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 128, false))
		}
	}
	if body.Health != nil {
		if *body.Health < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 0, true))
		}
	}
	if body.Health != nil {
		if *body.Health > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 1e+07, false))
		}
	}
	if body.Experience != nil {
		if *body.Experience < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 0, true))
		}
	}
	if body.Experience != nil {
		if *body.Experience > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 1e+07, false))
		}
	}
	return
}

// ValidateUpdateCharacterRequestBody runs the validations defined on
// UpdateCharacterRequestBody
func ValidateUpdateCharacterRequestBody(body *UpdateCharacterRequestBody) (err error) {
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 128, false))
		}
	}
	if body.Health != nil {
		if *body.Health < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 0, true))
		}
	}
	if body.Health != nil {
		if *body.Health > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.health", *body.Health, 1e+07, false))
		}
	}
	if body.Experience != nil {
		if *body.Experience < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 0, true))
		}
	}
	if body.Experience != nil {
		if *body.Experience > 1e+07 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.experience", *body.Experience, 1e+07, false))
		}
	}
	return
}

// ValidateCreateItemRequestBody runs the validations defined on
// CreateItemRequestBody
func ValidateCreateItemRequestBody(body *CreateItemRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 32, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 128, false))
		}
	}
	if body.Damage != nil {
		if *body.Damage < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 0, true))
		}
	}
	if body.Damage != nil {
		if *body.Damage > 1e+06 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 1e+06, false))
		}
	}
	if body.Healing != nil {
		if *body.Healing < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 0, true))
		}
	}
	if body.Healing != nil {
		if *body.Healing > 1e+06 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 1e+06, false))
		}
	}
	if body.Protection != nil {
		if *body.Protection < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 0, true))
		}
	}
	if body.Protection != nil {
		if *body.Protection > 10000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 10000, false))
		}
	}
	return
}

// ValidateUpdateItemRequestBody runs the validations defined on
// UpdateItemRequestBody
func ValidateUpdateItemRequestBody(body *UpdateItemRequestBody) (err error) {
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 128, false))
		}
	}
	if body.Damage != nil {
		if *body.Damage < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 0, true))
		}
	}
	if body.Damage != nil {
		if *body.Damage > 1e+06 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.damage", *body.Damage, 1e+06, false))
		}
	}
	if body.Healing != nil {
		if *body.Healing < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 0, true))
		}
	}
	if body.Healing != nil {
		if *body.Healing > 1e+06 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.healing", *body.Healing, 1e+06, false))
		}
	}
	if body.Protection != nil {
		if *body.Protection < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 0, true))
		}
	}
	if body.Protection != nil {
		if *body.Protection > 10000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.protection", *body.Protection, 10000, false))
		}
	}
	return
}

// ValidateAddInventoryItemRequestBody runs the validations defined on
// AddInventoryItemRequestBody
func ValidateAddInventoryItemRequestBody(body *AddInventoryItemRequestBody) (err error) {
	if body.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count", "body"))
	}
	return
}

// ValidateRemoveInventoryItemRequestBody runs the validations defined on
// RemoveInventoryItemRequestBody
func ValidateRemoveInventoryItemRequestBody(body *RemoveInventoryItemRequestBody) (err error) {
	if body.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count", "body"))
	}
	return
}
