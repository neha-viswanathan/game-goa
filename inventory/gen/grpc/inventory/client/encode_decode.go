// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Inventory gRPC client encoders and decoders
//
// Command:
// $ goa gen inventory/design

package client

import (
	"context"
	inventorypb "inventory/gen/grpc/inventory/pb"
	inventory "inventory/gen/inventory"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildAddItemFunc builds the remote method to invoke for "Inventory" service
// "addItem" endpoint.
func BuildAddItemFunc(grpccli inventorypb.InventoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.AddItem(ctx, reqpb.(*inventorypb.AddItemRequest), opts...)
		}
		return grpccli.AddItem(ctx, &inventorypb.AddItemRequest{}, opts...)
	}
}

// EncodeAddItemRequest encodes requests sent to Inventory addItem endpoint.
func EncodeAddItemRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*inventory.AddItemPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Inventory", "addItem", "*inventory.AddItemPayload", v)
	}
	return NewProtoAddItemRequest(payload), nil
}

// BuildRemoveItemFunc builds the remote method to invoke for "Inventory"
// service "removeItem" endpoint.
func BuildRemoveItemFunc(grpccli inventorypb.InventoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.RemoveItem(ctx, reqpb.(*inventorypb.RemoveItemRequest), opts...)
		}
		return grpccli.RemoveItem(ctx, &inventorypb.RemoveItemRequest{}, opts...)
	}
}

// EncodeRemoveItemRequest encodes requests sent to Inventory removeItem
// endpoint.
func EncodeRemoveItemRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*inventory.RemoveItemPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Inventory", "removeItem", "*inventory.RemoveItemPayload", v)
	}
	return NewProtoRemoveItemRequest(payload), nil
}

// BuildGetInventoryFunc builds the remote method to invoke for "Inventory"
// service "getInventory" endpoint.
func BuildGetInventoryFunc(grpccli inventorypb.InventoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetInventory(ctx, reqpb.(*inventorypb.GetInventoryRequest), opts...)
		}
		return grpccli.GetInventory(ctx, &inventorypb.GetInventoryRequest{}, opts...)
	}
}

// EncodeGetInventoryRequest encodes requests sent to Inventory getInventory
// endpoint.
func EncodeGetInventoryRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*inventory.GetInventoryPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Inventory", "getInventory", "*inventory.GetInventoryPayload", v)
	}
	return NewProtoGetInventoryRequest(payload), nil
}

// DecodeGetInventoryResponse decodes responses from the Inventory getInventory
// endpoint.
func DecodeGetInventoryResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*inventorypb.GetInventoryResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Inventory", "getInventory", "*inventorypb.GetInventoryResponse", v)
	}
	res := NewGetInventoryResult(message)
	return res, nil
}
