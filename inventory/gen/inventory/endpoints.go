// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Inventory endpoints
//
// Command:
// $ goa gen inventory/design

package inventory

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "Inventory" service endpoints.
type Endpoints struct {
	AddItem      goa.Endpoint
	RemoveItem   goa.Endpoint
	GetInventory goa.Endpoint
}

// NewEndpoints wraps the methods of the "Inventory" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		AddItem:      NewAddItemEndpoint(s),
		RemoveItem:   NewRemoveItemEndpoint(s),
		GetInventory: NewGetInventoryEndpoint(s),
	}
}

// Use applies the given middleware to all the "Inventory" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.AddItem = m(e.AddItem)
	e.RemoveItem = m(e.RemoveItem)
	e.GetInventory = m(e.GetInventory)
}

// NewAddItemEndpoint returns an endpoint function that calls the method
// "addItem" of service "Inventory".
func NewAddItemEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AddItemPayload)
		return nil, s.AddItem(ctx, p)
	}
}

// NewRemoveItemEndpoint returns an endpoint function that calls the method
// "removeItem" of service "Inventory".
func NewRemoveItemEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RemoveItemPayload)
		return nil, s.RemoveItem(ctx, p)
	}
}

// NewGetInventoryEndpoint returns an endpoint function that calls the method
// "getInventory" of service "Inventory".
func NewGetInventoryEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetInventoryPayload)
		return s.GetInventory(ctx, p)
	}
}
