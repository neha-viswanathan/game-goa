// Code generated by goa v3.11.2, DO NOT EDIT.
//
// item gRPC client CLI support package
//
// Command:
// $ goa gen item/design

package cli

import (
	"flag"
	"fmt"
	itemc "item/gen/grpc/item/client"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `item (create-item|get-item|list-items|update-item|delete-item)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` item create-item --message '{
      "damage": 298971,
      "description": "Restores health",
      "healing": 501251,
      "name": "Potion",
      "protection": 445
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		itemFlags = flag.NewFlagSet("item", flag.ContinueOnError)

		itemCreateItemFlags       = flag.NewFlagSet("create-item", flag.ExitOnError)
		itemCreateItemMessageFlag = itemCreateItemFlags.String("message", "", "")

		itemGetItemFlags       = flag.NewFlagSet("get-item", flag.ExitOnError)
		itemGetItemMessageFlag = itemGetItemFlags.String("message", "", "")

		itemListItemsFlags = flag.NewFlagSet("list-items", flag.ExitOnError)

		itemUpdateItemFlags       = flag.NewFlagSet("update-item", flag.ExitOnError)
		itemUpdateItemMessageFlag = itemUpdateItemFlags.String("message", "", "")

		itemDeleteItemFlags       = flag.NewFlagSet("delete-item", flag.ExitOnError)
		itemDeleteItemMessageFlag = itemDeleteItemFlags.String("message", "", "")
	)
	itemFlags.Usage = itemUsage
	itemCreateItemFlags.Usage = itemCreateItemUsage
	itemGetItemFlags.Usage = itemGetItemUsage
	itemListItemsFlags.Usage = itemListItemsUsage
	itemUpdateItemFlags.Usage = itemUpdateItemUsage
	itemDeleteItemFlags.Usage = itemDeleteItemUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "item":
			svcf = itemFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "item":
			switch epn {
			case "create-item":
				epf = itemCreateItemFlags

			case "get-item":
				epf = itemGetItemFlags

			case "list-items":
				epf = itemListItemsFlags

			case "update-item":
				epf = itemUpdateItemFlags

			case "delete-item":
				epf = itemDeleteItemFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "item":
			c := itemc.NewClient(cc, opts...)
			switch epn {
			case "create-item":
				endpoint = c.CreateItem()
				data, err = itemc.BuildCreateItemPayload(*itemCreateItemMessageFlag)
			case "get-item":
				endpoint = c.GetItem()
				data, err = itemc.BuildGetItemPayload(*itemGetItemMessageFlag)
			case "list-items":
				endpoint = c.ListItems()
				data = nil
			case "update-item":
				endpoint = c.UpdateItem()
				data, err = itemc.BuildUpdateItemPayload(*itemUpdateItemMessageFlag)
			case "delete-item":
				endpoint = c.DeleteItem()
				data, err = itemc.BuildDeleteItemPayload(*itemDeleteItemMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// itemUsage displays the usage of the item command and its subcommands.
func itemUsage() {
	fmt.Fprintf(os.Stderr, `The item service performs CRUD operations on a item
Usage:
    %[1]s [globalflags] item COMMAND [flags]

COMMAND:
    create-item: Create a new item
    get-item: Get an item by name
    list-items: List all items
    update-item: Update a given item
    delete-item: Delete a given item

Additional help:
    %[1]s item COMMAND --help
`, os.Args[0])
}
func itemCreateItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] item create-item -message JSON

Create a new item
    -message JSON: 

Example:
    %[1]s item create-item --message '{
      "damage": 298971,
      "description": "Restores health",
      "healing": 501251,
      "name": "Potion",
      "protection": 445
   }'
`, os.Args[0])
}

func itemGetItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] item get-item -message JSON

Get an item by name
    -message JSON: 

Example:
    %[1]s item get-item --message '{
      "name": "Quo qui ut nemo omnis porro eum."
   }'
`, os.Args[0])
}

func itemListItemsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] item list-items

List all items

Example:
    %[1]s item list-items
`, os.Args[0])
}

func itemUpdateItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] item update-item -message JSON

Update a given item
    -message JSON: 

Example:
    %[1]s item update-item --message '{
      "damage": 893006,
      "description": "Restores health",
      "healing": 421259,
      "name": "Potion",
      "protection": 5974
   }'
`, os.Args[0])
}

func itemDeleteItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] item delete-item -message JSON

Delete a given item
    -message JSON: 

Example:
    %[1]s item delete-item --message '{
      "name": "Aliquid consequatur libero."
   }'
`, os.Args[0])
}
