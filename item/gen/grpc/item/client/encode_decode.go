// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Item gRPC client encoders and decoders
//
// Command:
// $ goa gen item/design

package client

import (
	"context"
	itempb "item/gen/grpc/item/pb"
	item "item/gen/item"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildCreateItemFunc builds the remote method to invoke for "Item" service
// "createItem" endpoint.
func BuildCreateItemFunc(grpccli itempb.ItemClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.CreateItem(ctx, reqpb.(*itempb.CreateItemRequest), opts...)
		}
		return grpccli.CreateItem(ctx, &itempb.CreateItemRequest{}, opts...)
	}
}

// EncodeCreateItemRequest encodes requests sent to Item createItem endpoint.
func EncodeCreateItemRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*item.Item)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Item", "createItem", "*item.Item", v)
	}
	return NewProtoCreateItemRequest(payload), nil
}

// DecodeCreateItemResponse decodes responses from the Item createItem endpoint.
func DecodeCreateItemResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*itempb.CreateItemResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Item", "createItem", "*itempb.CreateItemResponse", v)
	}
	if err := ValidateCreateItemResponse(message); err != nil {
		return nil, err
	}
	res := NewCreateItemResult(message)
	return res, nil
}

// BuildGetItemFunc builds the remote method to invoke for "Item" service
// "getItem" endpoint.
func BuildGetItemFunc(grpccli itempb.ItemClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetItem(ctx, reqpb.(*itempb.GetItemRequest), opts...)
		}
		return grpccli.GetItem(ctx, &itempb.GetItemRequest{}, opts...)
	}
}

// EncodeGetItemRequest encodes requests sent to Item getItem endpoint.
func EncodeGetItemRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*item.GetItemPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Item", "getItem", "*item.GetItemPayload", v)
	}
	return NewProtoGetItemRequest(payload), nil
}

// DecodeGetItemResponse decodes responses from the Item getItem endpoint.
func DecodeGetItemResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*itempb.GetItemResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Item", "getItem", "*itempb.GetItemResponse", v)
	}
	if err := ValidateGetItemResponse(message); err != nil {
		return nil, err
	}
	res := NewGetItemResult(message)
	return res, nil
}

// BuildListItemsFunc builds the remote method to invoke for "Item" service
// "listItems" endpoint.
func BuildListItemsFunc(grpccli itempb.ItemClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.ListItems(ctx, reqpb.(*itempb.ListItemsRequest), opts...)
		}
		return grpccli.ListItems(ctx, &itempb.ListItemsRequest{}, opts...)
	}
}

// DecodeListItemsResponse decodes responses from the Item listItems endpoint.
func DecodeListItemsResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*itempb.ListItemsResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Item", "listItems", "*itempb.ListItemsResponse", v)
	}
	if err := ValidateListItemsResponse(message); err != nil {
		return nil, err
	}
	res := NewListItemsResult(message)
	return res, nil
}

// BuildUpdateItemFunc builds the remote method to invoke for "Item" service
// "updateItem" endpoint.
func BuildUpdateItemFunc(grpccli itempb.ItemClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.UpdateItem(ctx, reqpb.(*itempb.UpdateItemRequest), opts...)
		}
		return grpccli.UpdateItem(ctx, &itempb.UpdateItemRequest{}, opts...)
	}
}

// EncodeUpdateItemRequest encodes requests sent to Item updateItem endpoint.
func EncodeUpdateItemRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*item.Item)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Item", "updateItem", "*item.Item", v)
	}
	return NewProtoUpdateItemRequest(payload), nil
}

// DecodeUpdateItemResponse decodes responses from the Item updateItem endpoint.
func DecodeUpdateItemResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*itempb.UpdateItemResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Item", "updateItem", "*itempb.UpdateItemResponse", v)
	}
	if err := ValidateUpdateItemResponse(message); err != nil {
		return nil, err
	}
	res := NewUpdateItemResult(message)
	return res, nil
}

// BuildDeleteItemFunc builds the remote method to invoke for "Item" service
// "deleteItem" endpoint.
func BuildDeleteItemFunc(grpccli itempb.ItemClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.DeleteItem(ctx, reqpb.(*itempb.DeleteItemRequest), opts...)
		}
		return grpccli.DeleteItem(ctx, &itempb.DeleteItemRequest{}, opts...)
	}
}

// EncodeDeleteItemRequest encodes requests sent to Item deleteItem endpoint.
func EncodeDeleteItemRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*item.DeleteItemPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Item", "deleteItem", "*item.DeleteItemPayload", v)
	}
	return NewProtoDeleteItemRequest(payload), nil
}
