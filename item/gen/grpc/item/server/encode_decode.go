// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Item gRPC server encoders and decoders
//
// Command:
// $ goa gen item/design

package server

import (
	"context"
	itempb "item/gen/grpc/item/pb"
	item "item/gen/item"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeCreateItemResponse encodes responses from the "Item" service
// "createItem" endpoint.
func EncodeCreateItemResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*item.Item)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Item", "createItem", "*item.Item", v)
	}
	resp := NewProtoCreateItemResponse(result)
	return resp, nil
}

// DecodeCreateItemRequest decodes requests sent to "Item" service "createItem"
// endpoint.
func DecodeCreateItemRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *itempb.CreateItemRequest
		ok      bool
	)
	{
		if message, ok = v.(*itempb.CreateItemRequest); !ok {
			return nil, goagrpc.ErrInvalidType("Item", "createItem", "*itempb.CreateItemRequest", v)
		}
		if err := ValidateCreateItemRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *item.Item
	{
		payload = NewCreateItemPayload(message)
	}
	return payload, nil
}

// EncodeGetItemResponse encodes responses from the "Item" service "getItem"
// endpoint.
func EncodeGetItemResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*item.Item)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Item", "getItem", "*item.Item", v)
	}
	resp := NewProtoGetItemResponse(result)
	return resp, nil
}

// DecodeGetItemRequest decodes requests sent to "Item" service "getItem"
// endpoint.
func DecodeGetItemRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *itempb.GetItemRequest
		ok      bool
	)
	{
		if message, ok = v.(*itempb.GetItemRequest); !ok {
			return nil, goagrpc.ErrInvalidType("Item", "getItem", "*itempb.GetItemRequest", v)
		}
	}
	var payload *item.GetItemPayload
	{
		payload = NewGetItemPayload(message)
	}
	return payload, nil
}

// EncodeListItemsResponse encodes responses from the "Item" service
// "listItems" endpoint.
func EncodeListItemsResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.([]*item.Item)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Item", "listItems", "[]*item.Item", v)
	}
	resp := NewProtoListItemsResponse(result)
	return resp, nil
}

// EncodeUpdateItemResponse encodes responses from the "Item" service
// "updateItem" endpoint.
func EncodeUpdateItemResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*item.Item)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Item", "updateItem", "*item.Item", v)
	}
	resp := NewProtoUpdateItemResponse(result)
	return resp, nil
}

// DecodeUpdateItemRequest decodes requests sent to "Item" service "updateItem"
// endpoint.
func DecodeUpdateItemRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *itempb.UpdateItemRequest
		ok      bool
	)
	{
		if message, ok = v.(*itempb.UpdateItemRequest); !ok {
			return nil, goagrpc.ErrInvalidType("Item", "updateItem", "*itempb.UpdateItemRequest", v)
		}
		if err := ValidateUpdateItemRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *item.Item
	{
		payload = NewUpdateItemPayload(message)
	}
	return payload, nil
}

// EncodeDeleteItemResponse encodes responses from the "Item" service
// "deleteItem" endpoint.
func EncodeDeleteItemResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewProtoDeleteItemResponse()
	return resp, nil
}

// DecodeDeleteItemRequest decodes requests sent to "Item" service "deleteItem"
// endpoint.
func DecodeDeleteItemRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *itempb.DeleteItemRequest
		ok      bool
	)
	{
		if message, ok = v.(*itempb.DeleteItemRequest); !ok {
			return nil, goagrpc.ErrInvalidType("Item", "deleteItem", "*itempb.DeleteItemRequest", v)
		}
	}
	var payload *item.DeleteItemPayload
	{
		payload = NewDeleteItemPayload(message)
	}
	return payload, nil
}
