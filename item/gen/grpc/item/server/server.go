// Code generated by goa v3.11.2, DO NOT EDIT.
//
// Item gRPC server
//
// Command:
// $ goa gen item/design

package server

import (
	"context"
	"errors"
	itempb "item/gen/grpc/item/pb"
	item "item/gen/item"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the itempb.ItemServer interface.
type Server struct {
	CreateItemH goagrpc.UnaryHandler
	GetItemH    goagrpc.UnaryHandler
	ListItemsH  goagrpc.UnaryHandler
	UpdateItemH goagrpc.UnaryHandler
	DeleteItemH goagrpc.UnaryHandler
	itempb.UnimplementedItemServer
}

// New instantiates the server struct with the Item service endpoints.
func New(e *item.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		CreateItemH: NewCreateItemHandler(e.CreateItem, uh),
		GetItemH:    NewGetItemHandler(e.GetItem, uh),
		ListItemsH:  NewListItemsHandler(e.ListItems, uh),
		UpdateItemH: NewUpdateItemHandler(e.UpdateItem, uh),
		DeleteItemH: NewDeleteItemHandler(e.DeleteItem, uh),
	}
}

// NewCreateItemHandler creates a gRPC handler which serves the "Item" service
// "createItem" endpoint.
func NewCreateItemHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeCreateItemRequest, EncodeCreateItemResponse)
	}
	return h
}

// CreateItem implements the "CreateItem" method in itempb.ItemServer interface.
func (s *Server) CreateItem(ctx context.Context, message *itempb.CreateItemRequest) (*itempb.CreateItemResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "createItem")
	ctx = context.WithValue(ctx, goa.ServiceKey, "Item")
	resp, err := s.CreateItemH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "ItemAlreadyExists":
				var er *item.ItemAlreadyExists
				errors.As(err, &er)
				return nil, goagrpc.NewStatusError(codes.AlreadyExists, err, NewCreateItemItemAlreadyExistsError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*itempb.CreateItemResponse), nil
}

// NewGetItemHandler creates a gRPC handler which serves the "Item" service
// "getItem" endpoint.
func NewGetItemHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetItemRequest, EncodeGetItemResponse)
	}
	return h
}

// GetItem implements the "GetItem" method in itempb.ItemServer interface.
func (s *Server) GetItem(ctx context.Context, message *itempb.GetItemRequest) (*itempb.GetItemResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "getItem")
	ctx = context.WithValue(ctx, goa.ServiceKey, "Item")
	resp, err := s.GetItemH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "ItemNotFound":
				var er *item.ItemNotFound
				errors.As(err, &er)
				return nil, goagrpc.NewStatusError(codes.NotFound, err, NewGetItemItemNotFoundError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*itempb.GetItemResponse), nil
}

// NewListItemsHandler creates a gRPC handler which serves the "Item" service
// "listItems" endpoint.
func NewListItemsHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeListItemsResponse)
	}
	return h
}

// ListItems implements the "ListItems" method in itempb.ItemServer interface.
func (s *Server) ListItems(ctx context.Context, message *itempb.ListItemsRequest) (*itempb.ListItemsResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "listItems")
	ctx = context.WithValue(ctx, goa.ServiceKey, "Item")
	resp, err := s.ListItemsH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*itempb.ListItemsResponse), nil
}

// NewUpdateItemHandler creates a gRPC handler which serves the "Item" service
// "updateItem" endpoint.
func NewUpdateItemHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeUpdateItemRequest, EncodeUpdateItemResponse)
	}
	return h
}

// UpdateItem implements the "UpdateItem" method in itempb.ItemServer interface.
func (s *Server) UpdateItem(ctx context.Context, message *itempb.UpdateItemRequest) (*itempb.UpdateItemResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "updateItem")
	ctx = context.WithValue(ctx, goa.ServiceKey, "Item")
	resp, err := s.UpdateItemH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "ItemNotFound":
				var er *item.ItemNotFound
				errors.As(err, &er)
				return nil, goagrpc.NewStatusError(codes.NotFound, err, NewUpdateItemItemNotFoundError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*itempb.UpdateItemResponse), nil
}

// NewDeleteItemHandler creates a gRPC handler which serves the "Item" service
// "deleteItem" endpoint.
func NewDeleteItemHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeDeleteItemRequest, EncodeDeleteItemResponse)
	}
	return h
}

// DeleteItem implements the "DeleteItem" method in itempb.ItemServer interface.
func (s *Server) DeleteItem(ctx context.Context, message *itempb.DeleteItemRequest) (*itempb.DeleteItemResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "deleteItem")
	ctx = context.WithValue(ctx, goa.ServiceKey, "Item")
	resp, err := s.DeleteItemH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*itempb.DeleteItemResponse), nil
}
